{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport { executeQuery } from \"../../aws/db/dbOperation\";\nimport { User } from \"../../models/User\";\nimport { ActivityLogger } from \"../../log/ActivityLogger\";\nexport var fetchInitialEventData = function () {\n  var _ref = _asyncToGenerator(function* () {\n    var method = \"POST\";\n    var queryString = `SELECT\n      a.event_id,\n      a.modification_timestamp,\n      a.name AS event_name,\n      a.start_date,\n      a.end_date,\n      b.name AS venue_names\n      FROM\n      (\n          SELECT\n          event_id,\n          modification_timestamp,\n          name,\n          start_date,\n          end_date,\n          event_status_code\n          FROM\n          event\n          WHERE\n          city_code = '242152'\n          AND NOT is_deleted\n      ) AS a\n      INNER JOIN (\n          SELECT\n          event_id,\n          string_agg(\n              name,\n              '、'\n              ORDER BY\n              venue_id\n          ) AS name\n          FROM\n          venue\n          WHERE\n          city_code = '242152'\n          AND NOT is_deleted\n          GROUP BY\n          event_id\n      ) AS b ON a.event_id = b.event_id\n      INNER JOIN (\n          SELECT\n          event_status_code\n          FROM\n          event_status\n          WHERE\n          is_accept\n      ) AS c ON a.event_status_code = c.event_status_code\n      ORDER BY\n      a.modification_timestamp desc,\n      b.event_id`;\n    ActivityLogger.insertInfoLogEntry(new User(), 'EventList', 'fetchInitialEventData', 'execute query', '', null, queryString);\n    return executeQuery(method, queryString);\n  });\n  return function fetchInitialEventData() {\n    return _ref.apply(this, arguments);\n  };\n}();\nexport var fetchSearchEventData = function () {\n  var _ref2 = _asyncToGenerator(function* (eventName, venue, fromStartDate, toStartDate, fromEndDate, toEndDate, selectedOption) {\n    var method = \"POST\";\n    var eventNameCondition = \"\";\n    var venueCondition = \"\";\n    var startCondition = \"\";\n    var endCondition = \"\";\n    var sortOrderCondition = \"\";\n    if (eventName) {\n      eventNameCondition = `AND name LIKE CONCAT('%', '${eventName}', '%')`;\n    }\n    if (venue) {\n      venueCondition = `AND name LIKE CONCAT('%', '${venue}', '%')`;\n    }\n    if (fromStartDate && toStartDate) {\n      startCondition = `AND (start_date IS NULL OR ('%${fromStartDate}%' <= start_date AND start_date <= '%${toStartDate}%'))`;\n    } else if (fromStartDate && !toStartDate) {\n      startCondition = `AND (start_date IS NULL OR ('%${fromStartDate}%' <= start_date))`;\n    } else if (!fromStartDate && toStartDate) {\n      startCondition = `AND (start_date IS NULL OR (start_date <= '%${toStartDate}%'))`;\n    }\n    if (fromEndDate && toEndDate) {\n      endCondition = `AND (end_date IS NULL OR ('%${fromEndDate}%' <= end_date AND end_date <= '%${toEndDate}%'))`;\n    } else if (fromEndDate && !toEndDate) {\n      endCondition = `AND (end_date IS NULL OR ('%${fromEndDate}%' <= end_date))`;\n    } else if (!fromEndDate && toEndDate) {\n      endCondition = `AND (end_date IS NULL OR (end_date <= '%${toEndDate}%'))`;\n    }\n    if (selectedOption === \"最終更新日が新しい\") {\n      sortOrderCondition = `a.modification_timestamp DESC,`;\n    } else if (selectedOption === \"最終更新日が古い\") {\n      sortOrderCondition = `a.modification_timestamp ASC,`;\n    }\n    var queryString = `SELECT\n        a.event_id,\n        a.modification_timestamp,\n        a.name AS event_name,\n        a.start_date,\n        a.end_date,\n        b.name AS venue_names\n    FROM\n        (\n        SELECT\n            event_id,\n            modification_timestamp,\n            name,\n            start_date,\n            end_date,\n            event_status_code\n        FROM\n            event\n        WHERE\n            city_code = '242152'\n            AND NOT is_deleted\n            ${eventNameCondition}\n            ${startCondition}\n            ${endCondition}\n        ) AS a\n        INNER JOIN (\n        SELECT\n            c.event_id,\n            d.name\n        FROM\n            (\n            SELECT\n                event_id\n            FROM\n                venue\n            WHERE\n                city_code = '242152'\n                AND NOT is_deleted\n                ${venueCondition}\n            GROUP BY\n                event_id\n            ) AS c\n            INNER JOIN (\n            SELECT\n                event_id,\n                string_agg(\n                name,\n                '、'\n                ORDER BY\n                    venue_id\n                ) AS name\n            FROM\n                venue\n            WHERE\n                city_code = '242152'\n                AND NOT is_deleted\n            GROUP BY\n                event_id\n            ) AS d ON c.event_id = d.event_id\n        ) AS b ON a.event_id = b.event_id\n        INNER JOIN (\n        SELECT\n            event_status_code\n        FROM\n            event_status\n        WHERE\n            is_accept\n        ) AS c ON a.event_status_code = c.event_status_code\n    ORDER BY\n    ${sortOrderCondition}\n        b.event_id;`;\n    ActivityLogger.insertInfoLogEntry(new User(), 'EventList', 'fetchSearchEventData', 'execute query', '', null, queryString);\n    return executeQuery(method, queryString);\n  });\n  return function fetchSearchEventData(_x, _x2, _x3, _x4, _x5, _x6, _x7) {\n    return _ref2.apply(this, arguments);\n  };\n}();","map":{"version":3,"names":["executeQuery","User","ActivityLogger","fetchInitialEventData","_ref","_asyncToGenerator","method","queryString","insertInfoLogEntry","apply","arguments","fetchSearchEventData","_ref2","eventName","venue","fromStartDate","toStartDate","fromEndDate","toEndDate","selectedOption","eventNameCondition","venueCondition","startCondition","endCondition","sortOrderCondition","_x","_x2","_x3","_x4","_x5","_x6","_x7"],"sources":["/home/runner/work/DemoReception/DemoReception/example/src/screens/event-list/EventListService.ts"],"sourcesContent":["import { executeQuery } from \"../../aws/db/dbOperation\";\nimport { User } from \"../../models/User\";\nimport { ActivityLogger } from \"../../log/ActivityLogger\";\n\n// get Data\nexport const fetchInitialEventData = async () => {\n  const method = \"POST\";\n\n  const queryString = `SELECT\n      a.event_id,\n      a.modification_timestamp,\n      a.name AS event_name,\n      a.start_date,\n      a.end_date,\n      b.name AS venue_names\n      FROM\n      (\n          SELECT\n          event_id,\n          modification_timestamp,\n          name,\n          start_date,\n          end_date,\n          event_status_code\n          FROM\n          event\n          WHERE\n          city_code = '242152'\n          AND NOT is_deleted\n      ) AS a\n      INNER JOIN (\n          SELECT\n          event_id,\n          string_agg(\n              name,\n              '、'\n              ORDER BY\n              venue_id\n          ) AS name\n          FROM\n          venue\n          WHERE\n          city_code = '242152'\n          AND NOT is_deleted\n          GROUP BY\n          event_id\n      ) AS b ON a.event_id = b.event_id\n      INNER JOIN (\n          SELECT\n          event_status_code\n          FROM\n          event_status\n          WHERE\n          is_accept\n      ) AS c ON a.event_status_code = c.event_status_code\n      ORDER BY\n      a.modification_timestamp desc,\n      b.event_id`;\n  ActivityLogger.insertInfoLogEntry(new User(), 'EventList', 'fetchInitialEventData', 'execute query', '', null, queryString);\n  return executeQuery(method, queryString);\n};\n\n// SEARCH Event\nexport const fetchSearchEventData = async (\n  eventName: string,\n  venue: string,\n  fromStartDate: string,\n  toStartDate: string,\n  fromEndDate: string,\n  toEndDate: string,\n  selectedOption: string\n) => {\n  const method = \"POST\";\n  let eventNameCondition = \"\";\n  let venueCondition = \"\";\n  let startCondition = \"\";\n  let endCondition = \"\";\n  let sortOrderCondition = \"\";\n  // 1. Event name conditions\n  if (eventName) {\n    eventNameCondition = `AND name LIKE CONCAT('%', '${eventName}', '%')`;\n  }\n\n  // 2. Venue conditions\n  if (venue) {\n    venueCondition = `AND name LIKE CONCAT('%', '${venue}', '%')`;\n  }\n\n  // 3. Start date conditions\n  if (fromStartDate && toStartDate) {\n    startCondition = `AND (start_date IS NULL OR ('%${fromStartDate}%' <= start_date AND start_date <= '%${toStartDate}%'))`;\n  } else if (fromStartDate && !toStartDate) {\n    startCondition = `AND (start_date IS NULL OR ('%${fromStartDate}%' <= start_date))`;\n  } else if (!fromStartDate && toStartDate) {\n    startCondition = `AND (start_date IS NULL OR (start_date <= '%${toStartDate}%'))`;\n  }\n\n  // 4. End date conditions\n  if (fromEndDate && toEndDate) {\n    endCondition = `AND (end_date IS NULL OR ('%${fromEndDate}%' <= end_date AND end_date <= '%${toEndDate}%'))`;\n  } else if (fromEndDate && !toEndDate) {\n    endCondition = `AND (end_date IS NULL OR ('%${fromEndDate}%' <= end_date))`;\n  } else if (!fromEndDate && toEndDate) {\n    endCondition = `AND (end_date IS NULL OR (end_date <= '%${toEndDate}%'))`;\n  }\n\n  // 5. Sort order conditions\n  if (selectedOption === \"最終更新日が新しい\") {\n    sortOrderCondition = `a.modification_timestamp DESC,`;\n  } else if (selectedOption === \"最終更新日が古い\") {\n    sortOrderCondition = `a.modification_timestamp ASC,`;\n  }\n\n  const queryString = `SELECT\n        a.event_id,\n        a.modification_timestamp,\n        a.name AS event_name,\n        a.start_date,\n        a.end_date,\n        b.name AS venue_names\n    FROM\n        (\n        SELECT\n            event_id,\n            modification_timestamp,\n            name,\n            start_date,\n            end_date,\n            event_status_code\n        FROM\n            event\n        WHERE\n            city_code = '242152'\n            AND NOT is_deleted\n            ${eventNameCondition}\n            ${startCondition}\n            ${endCondition}\n        ) AS a\n        INNER JOIN (\n        SELECT\n            c.event_id,\n            d.name\n        FROM\n            (\n            SELECT\n                event_id\n            FROM\n                venue\n            WHERE\n                city_code = '242152'\n                AND NOT is_deleted\n                ${venueCondition}\n            GROUP BY\n                event_id\n            ) AS c\n            INNER JOIN (\n            SELECT\n                event_id,\n                string_agg(\n                name,\n                '、'\n                ORDER BY\n                    venue_id\n                ) AS name\n            FROM\n                venue\n            WHERE\n                city_code = '242152'\n                AND NOT is_deleted\n            GROUP BY\n                event_id\n            ) AS d ON c.event_id = d.event_id\n        ) AS b ON a.event_id = b.event_id\n        INNER JOIN (\n        SELECT\n            event_status_code\n        FROM\n            event_status\n        WHERE\n            is_accept\n        ) AS c ON a.event_status_code = c.event_status_code\n    ORDER BY\n    ${sortOrderCondition}\n        b.event_id;`;\n\n  ActivityLogger.insertInfoLogEntry(new User(), 'EventList', 'fetchSearchEventData', 'execute query', '', null, queryString);\n  return executeQuery(method, queryString);\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}