{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nexport function invokeLambdaWithQuery(_x, _x2) {\n  return _invokeLambdaWithQuery.apply(this, arguments);\n}\nfunction _invokeLambdaWithQuery() {\n  _invokeLambdaWithQuery = _asyncToGenerator(function* (method, queryString) {\n    try {\n      var baseURL = \"https://77gfxz605m.execute-api.ap-northeast-3.amazonaws.com/dev\";\n      var resource = \"/rdsProxyPostgres\";\n      var url = baseURL + resource;\n      var response = yield fetch(url, {\n        method: method,\n        body: JSON.stringify({\n          queryString: queryString\n        })\n      });\n      var responseBody = yield response.json();\n      return {\n        statusCode: responseBody.statusCode,\n        body: responseBody.body\n      };\n    } catch (error) {\n      return {\n        statusCode: 500,\n        body: JSON.stringify({\n          message: \"内部サーバーエラー\",\n          error: error.toString()\n        })\n      };\n    }\n  });\n  return _invokeLambdaWithQuery.apply(this, arguments);\n}","map":{"version":3,"names":["invokeLambdaWithQuery","_x","_x2","_invokeLambdaWithQuery","apply","arguments","_asyncToGenerator","method","queryString","baseURL","resource","url","response","fetch","body","JSON","stringify","responseBody","json","statusCode","error","message","toString"],"sources":["/home/runner/work/DemoReception/DemoReception/example/src/aws/api/apiHandler.ts"],"sourcesContent":["interface LambdaResult {\n  statusCode: number;\n  body: string;\n}\n\nexport async function invokeLambdaWithQuery(\n  method: string,\n  queryString: string\n): Promise<LambdaResult> {\n  try {\n    const baseURL =\n      \"https://77gfxz605m.execute-api.ap-northeast-3.amazonaws.com/dev\";\n    const resource = \"/rdsProxyPostgres\";\n    const url = baseURL + resource;\n\n    const response = await fetch(url, {\n      method: method,\n      body: JSON.stringify({\n        queryString,\n      }),\n    });\n\n    const responseBody = await response.json();\n\n    return {\n      statusCode: responseBody.statusCode,\n      body: responseBody.body,\n    };\n  } catch (error: any) {\n    return {\n      statusCode: 500,\n      body: JSON.stringify({\n        message: \"内部サーバーエラー\",\n        error: error.toString(),\n      }),\n    };\n  }\n}\n"],"mappings":";AAKA,gBAAsBA,qBAAqBA,CAAAC,EAAA,EAAAC,GAAA;EAAA,OAAAC,sBAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA;AAgC1C,SAAAF,uBAAA;EAAAA,sBAAA,GAAAG,iBAAA,CAhCM,WACLC,MAAc,EACdC,WAAmB,EACI;IACvB,IAAI;MACF,IAAMC,OAAO,GACX,iEAAiE;MACnE,IAAMC,QAAQ,GAAG,mBAAmB;MACpC,IAAMC,GAAG,GAAGF,OAAO,GAAGC,QAAQ;MAE9B,IAAME,QAAQ,SAASC,KAAK,CAACF,GAAG,EAAE;QAChCJ,MAAM,EAAEA,MAAM;QACdO,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UACnBR,WAAW,EAAXA;QACF,CAAC;MACH,CAAC,CAAC;MAEF,IAAMS,YAAY,SAASL,QAAQ,CAACM,IAAI,CAAC,CAAC;MAE1C,OAAO;QACLC,UAAU,EAAEF,YAAY,CAACE,UAAU;QACnCL,IAAI,EAAEG,YAAY,CAACH;MACrB,CAAC;IACH,CAAC,CAAC,OAAOM,KAAU,EAAE;MACnB,OAAO;QACLD,UAAU,EAAE,GAAG;QACfL,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UACnBK,OAAO,EAAE,WAAW;UACpBD,KAAK,EAAEA,KAAK,CAACE,QAAQ,CAAC;QACxB,CAAC;MACH,CAAC;IACH;EACF,CAAC;EAAA,OAAAnB,sBAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}