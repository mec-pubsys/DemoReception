{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Clipboard = void 0;\nvar NativeClipboard_1 = __importDefault(require(\"./NativeClipboard\"));\nexports.Clipboard = {\n  getString: function getString() {\n    return NativeClipboard_1.default.getString();\n  },\n  setString: function setString(content) {\n    NativeClipboard_1.default.setString(content);\n  },\n  hasString: function hasString() {\n    return NativeClipboard_1.default.hasString();\n  },\n  hasURL: function hasURL() {\n    return NativeClipboard_1.default.hasURL();\n  }\n};","map":{"version":3,"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","Clipboard","NativeClipboard_1","require","getString","default","setString","content","hasString","hasURL"],"sources":["/home/runner/work/DemoReception/DemoReception/example/node_modules/@react-native-community/clipboard/dist/Clipboard.js"],"sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Clipboard = void 0;\nvar NativeClipboard_1 = __importDefault(require(\"./NativeClipboard\"));\n/**\n * `Clipboard` gives you an interface for setting and getting content from Clipboard on both iOS and Android\n */\nexports.Clipboard = {\n    /**\n     * Get content of string type, this method returns a `Promise`, so you can use following code to get clipboard content\n     * ```javascript\n     * async _getContent() {\n     *   var content = await Clipboard.getString();\n     * }\n     * ```\n     */\n    getString: function () {\n        return NativeClipboard_1.default.getString();\n    },\n    /**\n     * Set content of string type. You can use following code to set clipboard content\n     * ```javascript\n     * _setContent() {\n     *   Clipboard.setString('hello world');\n     * }\n     * ```\n     * @param the content to be stored in the clipboard.\n     */\n    setString: function (content) {\n        NativeClipboard_1.default.setString(content);\n    },\n    /**\n     * Returns whether the clipboard has content or is empty.\n     * This method returns a `Promise`, so you can use following code to get clipboard content\n     * ```javascript\n     * async _hasContent() {\n     *   var hasContent = await Clipboard.hasString();\n     * }\n     * ```\n     */\n    hasString: function () {\n        return NativeClipboard_1.default.hasString();\n    },\n    /**\n     * (IOS Only)\n     * Returns whether the clipboard has content or is empty.\n     * This method returns a `Promise`, so you can use following code to get clipboard content\n     * ```javascript\n     * async _hasContent() {\n     *   var hasContent = await Clipboard.hasString();\n     * }\n     * ```\n     */\n    hasURL: function () {\n        return NativeClipboard_1.default.hasURL();\n    },\n};\n"],"mappings":"AAAA,YAAY;;AACZ,IAAIA,eAAe,GAAI,IAAI,IAAI,IAAI,CAACA,eAAe,IAAK,UAAUC,GAAG,EAAE;EACnE,OAAQA,GAAG,IAAIA,GAAG,CAACC,UAAU,GAAID,GAAG,GAAG;IAAE,SAAS,EAAEA;EAAI,CAAC;AAC7D,CAAC;AACDE,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,SAAS,GAAG,KAAK,CAAC;AAC1B,IAAIC,iBAAiB,GAAGR,eAAe,CAACS,OAAO,oBAAoB,CAAC,CAAC;AAIrEJ,OAAO,CAACE,SAAS,GAAG;EAShBG,SAAS,EAAE,SAAAA,UAAA,EAAY;IACnB,OAAOF,iBAAiB,CAACG,OAAO,CAACD,SAAS,CAAC,CAAC;EAChD,CAAC;EAUDE,SAAS,EAAE,SAAAA,UAAUC,OAAO,EAAE;IAC1BL,iBAAiB,CAACG,OAAO,CAACC,SAAS,CAACC,OAAO,CAAC;EAChD,CAAC;EAUDC,SAAS,EAAE,SAAAA,UAAA,EAAY;IACnB,OAAON,iBAAiB,CAACG,OAAO,CAACG,SAAS,CAAC,CAAC;EAChD,CAAC;EAWDC,MAAM,EAAE,SAAAA,OAAA,EAAY;IAChB,OAAOP,iBAAiB,CAACG,OAAO,CAACI,MAAM,CAAC,CAAC;EAC7C;AACJ,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}