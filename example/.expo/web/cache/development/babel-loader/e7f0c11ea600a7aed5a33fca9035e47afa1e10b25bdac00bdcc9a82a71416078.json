{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { useEffect, useState } from \"react\";\nimport FingerprintJS from \"@fingerprintjs/fingerprintjs\";\nexport var DeviceInfo = function DeviceInfo() {\n  var _useState = useState(\"\"),\n    _useState2 = _slicedToArray(_useState, 2),\n    DEVICE_ID = _useState2[0],\n    setDeviceId = _useState2[1];\n  useEffect(function () {\n    var fpPromise = FingerprintJS.load();\n    var fetchDeviceId = function () {\n      var _ref = _asyncToGenerator(function* () {\n        try {\n          var fp = yield fpPromise;\n          var result = yield fp.get();\n          var visitorId = result.visitorId;\n          setDeviceId(visitorId);\n        } catch (error) {\n          console.error(\"Error obtaining fingerprint:\", error);\n          setDeviceId(\"Unavailable\");\n        }\n      });\n      return function fetchDeviceId() {\n        return _ref.apply(this, arguments);\n      };\n    }();\n    fetchDeviceId();\n  }, []);\n  return DEVICE_ID;\n};","map":{"version":3,"names":["useEffect","useState","FingerprintJS","DeviceInfo","_useState","_useState2","_slicedToArray","DEVICE_ID","setDeviceId","fpPromise","load","fetchDeviceId","_ref","_asyncToGenerator","fp","result","get","visitorId","error","console","apply","arguments"],"sources":["/home/runner/work/DemoReception/DemoReception/example/src/environments/DeviceInfo.ts"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport FingerprintJS from \"@fingerprintjs/fingerprintjs\";\n\nexport const DeviceInfo = () => {\n  const [DEVICE_ID, setDeviceId] = useState(\"\");\n\n  useEffect(() => {\n    const fpPromise = FingerprintJS.load();\n\n    const fetchDeviceId = async () => {\n      try {\n        const fp = await fpPromise;\n        const result = await fp.get();\n        const visitorId = result.visitorId;\n        setDeviceId(visitorId);\n      } catch (error) {\n        console.error(\"Error obtaining fingerprint:\", error);\n        setDeviceId(\"Unavailable\");\n      }\n    };\n\n    fetchDeviceId();\n  }, []);\n\n  return DEVICE_ID;\n};\n"],"mappings":";;AAAA,SAAgBA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,aAAa,MAAM,8BAA8B;AAExD,OAAO,IAAMC,UAAU,GAAG,SAAbA,UAAUA,CAAA,EAAS;EAC9B,IAAAC,SAAA,GAAiCH,QAAQ,CAAC,EAAE,CAAC;IAAAI,UAAA,GAAAC,cAAA,CAAAF,SAAA;IAAtCG,SAAS,GAAAF,UAAA;IAAEG,WAAW,GAAAH,UAAA;EAE7BL,SAAS,CAAC,YAAM;IACd,IAAMS,SAAS,GAAGP,aAAa,CAACQ,IAAI,CAAC,CAAC;IAEtC,IAAMC,aAAa;MAAA,IAAAC,IAAA,GAAAC,iBAAA,CAAG,aAAY;QAChC,IAAI;UACF,IAAMC,EAAE,SAASL,SAAS;UAC1B,IAAMM,MAAM,SAASD,EAAE,CAACE,GAAG,CAAC,CAAC;UAC7B,IAAMC,SAAS,GAAGF,MAAM,CAACE,SAAS;UAClCT,WAAW,CAACS,SAAS,CAAC;QACxB,CAAC,CAAC,OAAOC,KAAK,EAAE;UACdC,OAAO,CAACD,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;UACpDV,WAAW,CAAC,aAAa,CAAC;QAC5B;MACF,CAAC;MAAA,gBAVKG,aAAaA,CAAA;QAAA,OAAAC,IAAA,CAAAQ,KAAA,OAAAC,SAAA;MAAA;IAAA,GAUlB;IAEDV,aAAa,CAAC,CAAC;EACjB,CAAC,EAAE,EAAE,CAAC;EAEN,OAAOJ,SAAS;AAClB,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}