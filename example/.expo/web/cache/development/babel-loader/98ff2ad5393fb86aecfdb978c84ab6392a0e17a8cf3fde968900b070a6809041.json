{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useEffect, useState } from \"react\";\nimport styles from \"./CompletionStyles\";\nimport { HiraginoKakuText } from \"../../components/StyledText\";\nimport Dialog from \"../../components/basics/Dialog\";\nimport { User } from \"../../models/User\";\nimport { ActivityLogger } from \"../../log/ActivityLogger\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nvar Completion = function Completion(_ref) {\n  var closeModal = _ref.closeModal;\n  var _useState = useState(10),\n    _useState2 = _slicedToArray(_useState, 2),\n    seconds = _useState2[0],\n    setSeconds = _useState2[1];\n  useEffect(function () {\n    ActivityLogger.insertInfoLogEntry(new User(), 'Completion', 'useEffect', 'screen open');\n  }, []);\n  useEffect(function () {\n    var interval = setInterval(function () {\n      if (seconds > 0) {\n        setSeconds(seconds - 1);\n      }\n      if (seconds == 0) {\n        clearInterval(interval);\n      }\n    }, 1000);\n    return function () {\n      clearInterval(interval);\n    };\n  });\n  return _jsx(Dialog, {\n    dialogTitle: \"\\u53D7\\u4ED8\\u304C\\u5B8C\\u4E86\\u3057\\u307E\\u3057\\u305F\",\n    text: _jsxs(HiraginoKakuText, {\n      style: styles.modalText,\n      normal: true,\n      children: [seconds, \"\\u79D2\\u5F8C\\u306B\\u3001\\u81EA\\u52D5\\u3067\\u6700\\u521D\\u306E\\u753B\\u9762\\u306B\\u623B\\u308A\\u307E\\u3059\\u3002\"]\n    }),\n    firstButtonText: \"\\u6700\\u521D\\u306E\\u753B\\u9762\\u306B\\u623B\\u308B\",\n    iconVisible: true,\n    iconColor: \"green\",\n    secondButtonVisible: false,\n    containerHeight: 402,\n    headerHeight: 112,\n    headerPaddingTop: 40,\n    containerGap: 32,\n    dialogBodyGap: 40,\n    btnContainerHeight: 52,\n    onFirstButtonPress: closeModal\n  });\n};\nexport default Completion;","map":{"version":3,"names":["React","useEffect","useState","styles","HiraginoKakuText","Dialog","User","ActivityLogger","jsxs","_jsxs","jsx","_jsx","Completion","_ref","closeModal","_useState","_useState2","_slicedToArray","seconds","setSeconds","insertInfoLogEntry","interval","setInterval","clearInterval","dialogTitle","text","style","modalText","normal","children","firstButtonText","iconVisible","iconColor","secondButtonVisible","containerHeight","headerHeight","headerPaddingTop","containerGap","dialogBodyGap","btnContainerHeight","onFirstButtonPress"],"sources":["/home/runner/work/DemoReception/DemoReception/example/src/screens/completion/Completion.tsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport styles from \"./CompletionStyles\";\nimport { HiraginoKakuText } from \"../../components/StyledText\";\nimport Dialog from \"../../components/basics/Dialog\";\nimport { User } from \"../../models/User\";\nimport { ActivityLogger } from \"../../log/ActivityLogger\";\n \ninterface ModalPopupProps {\n  closeModal?: () => void;\n}\n \nconst Completion: React.FC<ModalPopupProps> = ({ closeModal }) => {\n  const [seconds, setSeconds] = useState(10);\n  \n  useEffect(() => {\n    ActivityLogger.insertInfoLogEntry(new User(), 'Completion', 'useEffect', 'screen open');\n  }, []);\n\n  useEffect(() => {\n    let interval = setInterval(() => {\n      if(seconds > 0) {\n        setSeconds(seconds - 1);\n      }\n      if(seconds == 0) {\n        clearInterval(interval);\n      }\n    }, 1000);\n    return () => {\n      clearInterval(interval);\n    }\n  });\n  return (    \n    <Dialog\n      dialogTitle=\"受付が完了しました\"\n      text= {<HiraginoKakuText style={styles.modalText} normal>\n              {seconds}秒後に、自動で最初の画面に戻ります。\n            </HiraginoKakuText>}\n      firstButtonText=\"最初の画面に戻る\"\n      iconVisible={true}\n      iconColor=\"green\"\n      secondButtonVisible={false}\n      containerHeight={402}\n      headerHeight={112}\n      headerPaddingTop={40}\n      containerGap={32}\n      dialogBodyGap={40}\n      btnContainerHeight={52}      \n      onFirstButtonPress={closeModal}\n    />      \n  );\n};\n \nexport default Completion;"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,MAAM;AACb,SAASC,gBAAgB;AACzB,OAAOC,MAAM;AACb,SAASC,IAAI;AACb,SAASC,cAAc;AAAmC,SAAAC,IAAA,IAAAC,KAAA;AAAA,SAAAC,GAAA,IAAAC,IAAA;AAM1D,IAAMC,UAAqC,GAAG,SAAxCA,UAAqCA,CAAAC,IAAA,EAAuB;EAAA,IAAjBC,UAAU,GAAAD,IAAA,CAAVC,UAAU;EACzD,IAAAC,SAAA,GAA8Bb,QAAQ,CAAC,EAAE,CAAC;IAAAc,UAAA,GAAAC,cAAA,CAAAF,SAAA;IAAnCG,OAAO,GAAAF,UAAA;IAAEG,UAAU,GAAAH,UAAA;EAE1Bf,SAAS,CAAC,YAAM;IACdM,cAAc,CAACa,kBAAkB,CAAC,IAAId,IAAI,CAAC,CAAC,EAAE,YAAY,EAAE,WAAW,EAAE,aAAa,CAAC;EACzF,CAAC,EAAE,EAAE,CAAC;EAENL,SAAS,CAAC,YAAM;IACd,IAAIoB,QAAQ,GAAGC,WAAW,CAAC,YAAM;MAC/B,IAAGJ,OAAO,GAAG,CAAC,EAAE;QACdC,UAAU,CAACD,OAAO,GAAG,CAAC,CAAC;MACzB;MACA,IAAGA,OAAO,IAAI,CAAC,EAAE;QACfK,aAAa,CAACF,QAAQ,CAAC;MACzB;IACF,CAAC,EAAE,IAAI,CAAC;IACR,OAAO,YAAM;MACXE,aAAa,CAACF,QAAQ,CAAC;IACzB,CAAC;EACH,CAAC,CAAC;EACF,OACEV,IAAA,CAACN,MAAM;IACLmB,WAAW,EAAC,wDAAW;IACvBC,IAAI,EAAGhB,KAAA,CAACL,gBAAgB;MAACsB,KAAK,EAAEvB,MAAM,CAACwB,SAAU;MAACC,MAAM;MAAAC,QAAA,GAC/CX,OAAO,EAAC,8GACX;IAAA,CAAkB,CAAE;IAC1BY,eAAe,EAAC,kDAAU;IAC1BC,WAAW,EAAE,IAAK;IAClBC,SAAS,EAAC,OAAO;IACjBC,mBAAmB,EAAE,KAAM;IAC3BC,eAAe,EAAE,GAAI;IACrBC,YAAY,EAAE,GAAI;IAClBC,gBAAgB,EAAE,EAAG;IACrBC,YAAY,EAAE,EAAG;IACjBC,aAAa,EAAE,EAAG;IAClBC,kBAAkB,EAAE,EAAG;IACvBC,kBAAkB,EAAE1B;EAAW,CAChC,CAAC;AAEN,CAAC;AAED,eAAeF,UAAU"},"metadata":{},"sourceType":"module","externalDependencies":[]}