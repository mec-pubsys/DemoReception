{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport { executeQuery } from \"../aws/db/dbOperation\";\nimport { logConfig, logMode } from \"../config/appConfig\";\nimport { DeviceInfo } from \"../environments/DeviceInfo4pureTS\";\nimport { getCurrentJapanTime } from \"../environments/TimeUtils\";\nexport var ActivityLogger = function () {\n  function ActivityLogger() {\n    _classCallCheck(this, ActivityLogger);\n  }\n  _createClass(ActivityLogger, null, [{\n    key: \"insertInfoLogEntry\",\n    value: function () {\n      var _insertInfoLogEntry = _asyncToGenerator(function* (user, screenName, functionName, actionType, targetScreenName, parameters, query, message) {\n        if (logConfig.IS_LOG_OUTPUT) {\n          var queryString = `INSERT INTO user_activity_log (\n            city_code\n            ,application_name\n            ,timestamp\n            ,user_id\n            ,device_id\n            ,log_level\n            ,screen_name\n            ,function_name\n            ,action_type\n            ,target_screen_name\n            ,parameters\n            ,query\n            ,message\n            ) VALUES (`;\n          queryString += `'${this.CITY_CODE}'`;\n          queryString += `,'${this.APPLICATION_NAME}'`;\n          queryString += `,'${getCurrentJapanTime()}'`;\n          queryString += `,'${user.userId}'`;\n          queryString += `,'${(yield this.DEVICE_ID).toString()}'`;\n          queryString += `,'${this.LOG_LEVEL.INFO}'`;\n          queryString += `,'${screenName}'`;\n          queryString += `,'${functionName}'`;\n          queryString += `,'${actionType}'`;\n          queryString += targetScreenName ? `,'${targetScreenName}'` : `,''`;\n          queryString += parameters ? `,'${parameters.getAllValuesAsString()}'` : `,''`;\n          queryString += query ? `,'` + query.replaceAll(`'`, `''`) + `'` : `,''`;\n          queryString += message ? `,'${message}'` : `,''`;\n          queryString += `);`;\n          if (logConfig.LOG_MODE === logMode.NORMAL) {\n            return executeQuery(this.METHOD, queryString);\n          } else if (logConfig.LOG_MODE === logMode.DEVELOP) {\n            var result = yield executeQuery(this.METHOD, queryString);\n            if (result.message !== 'No rows affected by query' && result.message !== 'success') {\n              alert('ERROR:ActivityLogger');\n              console.log('ERROR:ActivityLogger');\n              alert(result.message);\n              console.log(result.message);\n              alert(queryString);\n              console.log(queryString);\n            }\n            return result;\n          } else {\n            return;\n          }\n        }\n      });\n      function insertInfoLogEntry(_x, _x2, _x3, _x4, _x5, _x6, _x7, _x8) {\n        return _insertInfoLogEntry.apply(this, arguments);\n      }\n      return insertInfoLogEntry;\n    }()\n  }]);\n  return ActivityLogger;\n}();\nActivityLogger.METHOD = 'POST';\nActivityLogger.CITY_CODE = '242152';\nActivityLogger.APPLICATION_NAME = 'LGaP_RECEPTION';\nActivityLogger.DEVICE_ID = DeviceInfo.getDeviceInfo();\nActivityLogger.LOG_LEVEL = {\n  INFO: 'info'\n};","map":{"version":3,"names":["executeQuery","logConfig","logMode","DeviceInfo","getCurrentJapanTime","ActivityLogger","_classCallCheck","_createClass","key","value","_insertInfoLogEntry","_asyncToGenerator","user","screenName","functionName","actionType","targetScreenName","parameters","query","message","IS_LOG_OUTPUT","queryString","CITY_CODE","APPLICATION_NAME","userId","DEVICE_ID","toString","LOG_LEVEL","INFO","getAllValuesAsString","replaceAll","LOG_MODE","NORMAL","METHOD","DEVELOP","result","alert","console","log","insertInfoLogEntry","_x","_x2","_x3","_x4","_x5","_x6","_x7","_x8","apply","arguments","getDeviceInfo"],"sources":["/home/runner/work/DemoReception/DemoReception/example/src/log/ActivityLogger.ts"],"sourcesContent":["import { executeQuery } from '../aws/db/dbOperation';\nimport { logConfig, logMode } from \"../config/appConfig\";\nimport { DeviceInfo } from \"../environments/DeviceInfo4pureTS\";\nimport { getCurrentJapanTime } from \"../environments/TimeUtils\";\nimport { User } from \"../models/User\";\n\nexport class ActivityLogger {\n    static readonly METHOD = 'POST';\n    static readonly CITY_CODE = '242152';\n    static readonly APPLICATION_NAME = 'LGaP_RECEPTION';\n    static readonly DEVICE_ID = DeviceInfo.getDeviceInfo();\n    static readonly LOG_LEVEL = {\n        INFO: 'info'\n    };\n\n    static async insertInfoLogEntry(user: User, screenName: string, functionName: string, actionType: string, targetScreenName?: string, parameters?: any, query?: string, message?: string) {\n\n        if (logConfig.IS_LOG_OUTPUT) {\n\n            let queryString = `INSERT INTO user_activity_log (\n            city_code\n            ,application_name\n            ,timestamp\n            ,user_id\n            ,device_id\n            ,log_level\n            ,screen_name\n            ,function_name\n            ,action_type\n            ,target_screen_name\n            ,parameters\n            ,query\n            ,message\n            ) VALUES (`;\n            queryString += `'${this.CITY_CODE}'`;\n            queryString += `,'${this.APPLICATION_NAME}'`;\n            queryString += `,'${getCurrentJapanTime()}'`;\n            queryString += `,'${user.userId}'`;\n            queryString += `,'${(await this.DEVICE_ID).toString()}'`;\n            queryString += `,'${this.LOG_LEVEL.INFO}'`;\n            queryString += `,'${screenName}'`;\n            queryString += `,'${functionName}'`;\n            queryString += `,'${actionType}'`;\n            queryString += targetScreenName ? `,'${targetScreenName}'` : `,''`;\n            queryString += parameters ? `,'${parameters.getAllValuesAsString()}'` : `,''`;\n            queryString += query ? `,'` + query.replaceAll(`'`, `''`) + `'` : `,''`;\n            queryString += message ? `,'${message}'` : `,''`;\n            queryString += `);`;\n\n            if (logConfig.LOG_MODE === logMode.NORMAL) {\n                return executeQuery(this.METHOD, queryString);\n\n            } else if (logConfig.LOG_MODE === logMode.DEVELOP) {\n                const result = await executeQuery(this.METHOD, queryString);\n                if (result.message !== 'No rows affected by query' && result.message !== 'success') {\n                    alert('ERROR:ActivityLogger');\n                    console.log('ERROR:ActivityLogger');\n                    alert(result.message);\n                    console.log(result.message);\n                    alert(queryString);\n                    console.log(queryString);\n                }\n                return result;\n\n            } else {\n                return;\n            }\n\n        }\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}