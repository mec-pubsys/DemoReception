{"ast":null,"code":"import Platform from \"react-native-web/dist/exports/Platform\";\nvar isLocalhost = false;\nif (Platform.OS === 'web') {\n  isLocalhost = Boolean(window.location.hostname === \"localhost\" || window.location.hostname === \"[::1]\" || window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));\n}\nexport function register(config) {\n  var isEnvProduction = process.env.NODE_ENV === \"production\";\n  if (isEnvProduction && \"serviceWorker\" in navigator) {\n    var publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      return;\n    }\n    window.addEventListener(\"load\", function () {\n      var swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n      if (isLocalhost) {\n        checkValidServiceWorker(swUrl, config);\n        navigator.serviceWorker.ready.then(function () {\n          console.log(\"This web app is being served cache-first by a service \" + \"worker. To learn more, visit https://cra.link/PWA\");\n        });\n      } else {\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker.register(swUrl).then(function (registration) {\n    registration.onupdatefound = function () {\n      var installingWorker = registration.installing;\n      if (installingWorker == null) {\n        return;\n      }\n      installingWorker.onstatechange = function () {\n        if (installingWorker.state === \"installed\") {\n          if (navigator.serviceWorker.controller) {\n            console.log(\"New content is available and will be used when all \" + \"tabs for this page are closed. See https://cra.link/PWA.\");\n            if (config && config.onUpdate) {\n              config.onUpdate(registration);\n            }\n          } else {\n            console.log(\"Content is cached for offline use.\");\n            if (config && config.onSuccess) {\n              config.onSuccess(registration);\n            }\n          }\n        }\n      };\n    };\n  }).catch(function (error) {\n    console.error(\"Error during service worker registration:\", error);\n  });\n}\nfunction checkValidServiceWorker(swUrl, config) {\n  fetch(swUrl, {\n    headers: {\n      \"Service-Worker\": \"script\"\n    }\n  }).then(function (response) {\n    var contentType = response.headers.get(\"content-type\");\n    if (response.status === 404 || contentType != null && contentType.indexOf(\"javascript\") === -1) {\n      navigator.serviceWorker.ready.then(function (registration) {\n        registration.unregister().then(function () {\n          window.location.reload();\n        });\n      });\n    } else {\n      registerValidSW(swUrl, config);\n    }\n  }).catch(function () {\n    console.log(\"No internet connection found. App is running in offline mode.\");\n  });\n}\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(function (registration) {\n      registration.unregister();\n    }).catch(function (error) {\n      console.error(error.message);\n    });\n  }\n}","map":{"version":3,"names":["isLocalhost","Platform","OS","Boolean","window","location","hostname","match","register","config","isEnvProduction","process","env","NODE_ENV","navigator","publicUrl","URL","PUBLIC_URL","href","origin","addEventListener","swUrl","checkValidServiceWorker","serviceWorker","ready","then","console","log","registerValidSW","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","fetch","headers","response","contentType","get","status","indexOf","unregister","reload","message"],"sources":["/home/runner/work/DemoReception/DemoReception/example/src/serviceWorkerRegistration.js"],"sourcesContent":["import { Platform } from \"react-native\";\n\nlet isLocalhost = false;\n\nif (Platform.OS === 'web') {\n  isLocalhost = Boolean(\n    window.location.hostname === \"localhost\" ||\n    window.location.hostname === \"[::1]\" ||\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n  );\n}\n\nexport function register(config) {\n\tconst isEnvProduction = process.env.NODE_ENV === \"production\";\n\tif (isEnvProduction && \"serviceWorker\" in navigator) {\n\t\tconst publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n\t\tif (publicUrl.origin !== window.location.origin) {\n\t\t\treturn;\n\t\t}\n\n\t\twindow.addEventListener(\"load\", () => {\n\t\t\tconst swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n\t\t\tif (isLocalhost) {\n\t\t\t\tcheckValidServiceWorker(swUrl, config);\n\t\t\t\tnavigator.serviceWorker.ready.then(() => {\n\t\t\t\t\tconsole.log(\n\t\t\t\t\t\t\"This web app is being served cache-first by a service \" +\n\t\t\t\t\t\t\"worker. To learn more, visit https://cra.link/PWA\"\n\t\t\t\t\t);\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tregisterValidSW(swUrl, config);\n\t\t\t}\n\t\t});\n\t}\n}\n\nfunction registerValidSW(swUrl, config) {\n\tnavigator.serviceWorker\n\t\t.register(swUrl)\n\t\t.then((registration) => {\n\t\t\tregistration.onupdatefound = () => {\n\t\t\t\tconst installingWorker = registration.installing;\n\t\t\t\tif (installingWorker == null) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tinstallingWorker.onstatechange = () => {\n\t\t\t\t\tif (installingWorker.state === \"installed\") {\n\t\t\t\t\t\tif (navigator.serviceWorker.controller) {\n\t\t\t\t\t\t\tconsole.log(\n\t\t\t\t\t\t\t\t\"New content is available and will be used when all \" +\n\t\t\t\t\t\t\t\t\"tabs for this page are closed. See https://cra.link/PWA.\"\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tif (config && config.onUpdate) {\n\t\t\t\t\t\t\t\tconfig.onUpdate(registration);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tconsole.log(\"Content is cached for offline use.\");\n\n\t\t\t\t\t\t\t// Execute callback\n\t\t\t\t\t\t\tif (config && config.onSuccess) {\n\t\t\t\t\t\t\t\tconfig.onSuccess(registration);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t};\n\t\t})\n\t\t.catch((error) => {\n\t\t\tconsole.error(\"Error during service worker registration:\", error);\n\t\t});\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n\tfetch(swUrl, {\n\t\theaders: { \"Service-Worker\": \"script\" },\n\t})\n\t\t.then((response) => {\n\t\t\tconst contentType = response.headers.get(\"content-type\");\n\t\t\tif (\n\t\t\t\tresponse.status === 404 ||\n\t\t\t\t(contentType != null && contentType.indexOf(\"javascript\") === -1)\n\t\t\t) {\n\t\t\t\tnavigator.serviceWorker.ready.then((registration) => {\n\t\t\t\t\tregistration.unregister().then(() => {\n\t\t\t\t\t\twindow.location.reload();\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tregisterValidSW(swUrl, config);\n\t\t\t}\n\t\t})\n\t\t.catch(() => {\n\t\t\tconsole.log(\n\t\t\t\t\"No internet connection found. App is running in offline mode.\"\n\t\t\t);\n\t\t});\n}\n\nexport function unregister() {\n\tif (\"serviceWorker\" in navigator) {\n\t\tnavigator.serviceWorker.ready\n\t\t\t.then((registration) => {\n\t\t\t\tregistration.unregister();\n\t\t\t})\n\t\t\t.catch((error) => {\n\t\t\t\tconsole.error(error.message);\n\t\t\t});\n\t}\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}