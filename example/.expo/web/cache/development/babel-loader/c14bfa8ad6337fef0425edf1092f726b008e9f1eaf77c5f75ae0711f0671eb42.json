{"ast":null,"code":"import _objectDestructuringEmpty from \"@babel/runtime/helpers/objectDestructuringEmpty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useEffect, useState, useRef } from \"react\";\nimport StatusBar from \"react-native-web/dist/exports/StatusBar\";\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Pressable from \"react-native-web/dist/exports/Pressable\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport useWindowDimensions from \"react-native-web/dist/exports/useWindowDimensions\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport styles from \"./SelfqrDescriptionStyles\";\nimport { Header } from \"../../components/basics/header\";\nimport { Footer } from \"../../components/basics/footer\";\nimport { colors } from \"../../styles/color\";\nimport { HiraginoKakuText } from \"../../components/StyledText\";\nimport { useRoute } from \"@react-navigation/native\";\nimport { SelectReceptionMethodParams } from \"../select-reception-method/SelectReceptionMethodParams\";\nimport { SelfqrScannerParams } from \"../selfqr-scanner/SelfqrScannerParams\";\nimport { GestureHandlerRootView, GestureDetector, Gesture } from 'react-native-gesture-handler';\nimport { useSharedValue, withSpring, runOnJS } from 'react-native-reanimated';\nimport { ActivityLogger } from \"../../log/ActivityLogger\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar slides = [{\n  id: \"1\",\n  text: \"[自治体アプリ]を起動して、自己QRをタップ\",\n  image: require(\"../../assets/images/firstCarousel.png\")\n}, {\n  id: \"2\",\n  text: \"受付する人を選んで、自己QRを表示するをタップ\",\n  image: require(\"../../assets/images/secondCarousel.png\")\n}, {\n  id: \"3\",\n  text: \"自己QRが表示されます。読み取りへ進んでください\",\n  image: require(\"../../assets/images/thirdCarousel.png\")\n}];\nvar Onboarding = function Onboarding(_ref) {\n  var currentIndex = _ref.currentIndex,\n    scrollToIndex = _ref.scrollToIndex,\n    slides = _ref.slides;\n  var slidesRef = useRef(null);\n  var _useWindowDimensions = useWindowDimensions(),\n    width = _useWindowDimensions.width;\n  var translationX = useSharedValue(0);\n  var Item = function Item(_ref2) {\n    var currentIndex = _ref2.currentIndex;\n    var currentText = slides[currentIndex].text;\n    var currentImage = slides[currentIndex].image;\n    return _jsxs(View, {\n      children: [_jsx(View, {\n        style: styles.bodyHeading,\n        children: _jsx(HiraginoKakuText, {\n          style: styles.bodyHeadingText,\n          children: currentText\n        })\n      }), _jsx(View, {\n        style: styles.bodyImageContainer,\n        children: _jsx(Image, {\n          source: currentImage,\n          style: [styles.bodyImage, {\n            width: width,\n            resizeMode: \"contain\"\n          }]\n        })\n      })]\n    });\n  };\n  var _renderItem = function _renderItem(listRenderItemInfo) {\n    return _jsx(Item, {\n      item: listRenderItemInfo.item,\n      currentIndex: currentIndex\n    });\n  };\n  var viewConfig = useRef({\n    viewAreaCoveragePercentThreshold: 50\n  }).current;\n  var swipeGesture = Gesture.Pan().onUpdate(function (event) {\n    translationX.value = event.translationX;\n  }).onEnd(function (event) {\n    if (event.translationX < 0 && currentIndex < slides.length - 1) {\n      runOnJS(scrollToIndex)(currentIndex + 1);\n    } else if (event.translationX > 0 && currentIndex > 0) {\n      runOnJS(scrollToIndex)(currentIndex - 1);\n    }\n    translationX.value = withSpring(0);\n  });\n  return _jsx(GestureHandlerRootView, {\n    children: _jsx(GestureDetector, {\n      gesture: swipeGesture,\n      children: _jsx(FlatList, {\n        data: slides,\n        renderItem: _renderItem,\n        keyExtractor: function keyExtractor(item) {\n          return item.id;\n        },\n        horizontal: true,\n        showsHorizontalScrollIndicator: false,\n        pagingEnabled: true,\n        bounces: false,\n        scrollEventThrottle: 32,\n        viewabilityConfig: viewConfig,\n        ref: function ref(_ref3) {\n          slidesRef.current = _ref3;\n        }\n      })\n    })\n  });\n};\nexport var SelfqrDescription = function SelfqrDescription(_ref4) {\n  var navigation = _ref4.navigation;\n  var route = useRoute();\n  var _ref5 = route.params,\n    selfqrDescriptionParams = _ref5.selfqrDescriptionParams;\n  var _useState = useState(0),\n    _useState2 = _slicedToArray(_useState, 2),\n    currentIndex = _useState2[0],\n    setCurrentIndex = _useState2[1];\n  var flatListRef = useRef(null);\n  useEffect(function () {\n    ActivityLogger.insertInfoLogEntry(selfqrDescriptionParams.user, 'SelfqrDescription', 'useEffect', 'screen open');\n  }, []);\n  var scrollToIndex = function scrollToIndex(index) {\n    var _flatListRef$current;\n    (_flatListRef$current = flatListRef.current) == null ? void 0 : _flatListRef$current.scrollToIndex({\n      animated: true,\n      index: index\n    });\n    setCurrentIndex(index);\n  };\n  var scrollToPrevious = function scrollToPrevious() {\n    if (currentIndex > 0) {\n      scrollToIndex(currentIndex - 1);\n    } else if (currentIndex === 0) {\n      var selectReceptionMethodParams = new SelectReceptionMethodParams();\n      selectReceptionMethodParams.eventId = selfqrDescriptionParams.eventId;\n      selectReceptionMethodParams.venueId = selfqrDescriptionParams.venueId;\n      selectReceptionMethodParams.user = selfqrDescriptionParams.user;\n      selectReceptionMethodParams.receptionTypeCode = selfqrDescriptionParams.receptionTypeCode;\n      navigation.navigate(\"SelectReceptionMethod\", {\n        selectReceptionMethodParams: selectReceptionMethodParams\n      });\n    }\n  };\n  var scrollToNext = function scrollToNext() {\n    if (currentIndex < slides.length - 1) {\n      scrollToIndex(currentIndex + 1);\n    }\n  };\n  var handleReadButton = function handleReadButton() {\n    var selfqrScannerParams = new SelfqrScannerParams();\n    selfqrScannerParams.user = selfqrDescriptionParams.user;\n    selfqrScannerParams.eventId = selfqrDescriptionParams.eventId;\n    selfqrScannerParams.venueId = selfqrDescriptionParams.venueId;\n    selfqrScannerParams.receptionTypeCode = selfqrDescriptionParams.receptionTypeCode;\n    navigation.navigate(\"SelfqrScanner\", {\n      selfqrScannerParams: selfqrScannerParams\n    });\n  };\n  var handleSelectReceptionMethod = function handleSelectReceptionMethod() {\n    var selectReceptionMethodParams = new SelectReceptionMethodParams();\n    selectReceptionMethodParams.eventId = selfqrDescriptionParams.eventId;\n    selectReceptionMethodParams.venueId = selfqrDescriptionParams.venueId;\n    selectReceptionMethodParams.user.userId = selfqrDescriptionParams.user.userId;\n    selectReceptionMethodParams.receptionTypeCode = selfqrDescriptionParams.receptionTypeCode;\n    navigation.navigate(\"SelectReceptionMethod\", {\n      selectReceptionMethodParams: selectReceptionMethodParams\n    });\n  };\n  return _jsxs(SafeAreaView, {\n    style: styles.mainContainer,\n    children: [_jsx(StatusBar, {\n      barStyle: \"dark-content\"\n    }), _jsx(Header, {\n      titleName: \"\\u81EA\\u5DF1QR\\u3067\\u53D7\\u4ED8\",\n      buttonName: \"\\u53D7\\u4ED8\\u3092\\u3084\\u3081\\u308B\",\n      onPress: handleSelectReceptionMethod\n    }), _jsx(View, {\n      style: styles.slideContainer,\n      children: _jsx(Onboarding, {\n        currentIndex: currentIndex,\n        setCurrentIndex: setCurrentIndex,\n        scrollToIndex: scrollToIndex,\n        slides: slides\n      })\n    }), _jsx(View, {\n      style: styles.dotView,\n      children: slides.map(function (_ref6, index) {\n        _objectDestructuringEmpty(_ref6);\n        return _jsx(Pressable, {\n          style: [styles.circle, {\n            backgroundColor: index === currentIndex ? colors.activeCarouselColor : colors.gray\n          }],\n          onPress: function onPress() {\n            return scrollToIndex(index);\n          }\n        }, index.toString());\n      })\n    }), _jsx(Footer, {\n      currentIndex: currentIndex,\n      slides: slides,\n      hasNextButton: true,\n      onPressPrevious: scrollToPrevious,\n      onPressNext: scrollToNext,\n      onPress: handleReadButton\n    })]\n  });\n};","map":{"version":3,"names":["React","useEffect","useState","useRef","StatusBar","SafeAreaView","View","Pressable","Image","useWindowDimensions","FlatList","styles","Header","Footer","colors","HiraginoKakuText","useRoute","SelectReceptionMethodParams","SelfqrScannerParams","GestureHandlerRootView","GestureDetector","Gesture","useSharedValue","withSpring","runOnJS","ActivityLogger","jsx","_jsx","jsxs","_jsxs","slides","id","text","image","require","Onboarding","_ref","currentIndex","scrollToIndex","slidesRef","_useWindowDimensions","width","translationX","Item","_ref2","currentText","currentImage","children","style","bodyHeading","bodyHeadingText","bodyImageContainer","source","bodyImage","resizeMode","_renderItem","listRenderItemInfo","item","viewConfig","viewAreaCoveragePercentThreshold","current","swipeGesture","Pan","onUpdate","event","value","onEnd","length","gesture","data","renderItem","keyExtractor","horizontal","showsHorizontalScrollIndicator","pagingEnabled","bounces","scrollEventThrottle","viewabilityConfig","ref","SelfqrDescription","_ref4","navigation","route","_ref5","params","selfqrDescriptionParams","_useState","_useState2","_slicedToArray","setCurrentIndex","flatListRef","insertInfoLogEntry","user","index","_flatListRef$current","animated","scrollToPrevious","selectReceptionMethodParams","eventId","venueId","receptionTypeCode","navigate","scrollToNext","handleReadButton","selfqrScannerParams","handleSelectReceptionMethod","userId","mainContainer","barStyle","titleName","buttonName","onPress","slideContainer","dotView","map","_ref6","_objectDestructuringEmpty","circle","backgroundColor","activeCarouselColor","gray","toString","hasNextButton","onPressPrevious","onPressNext"],"sources":["/home/runner/work/DemoReception/DemoReception/example/src/screens/serlfqr-description/SelfqrDescription.tsx"],"sourcesContent":["import React, { useEffect, useState, useRef, SetStateAction } from \"react\";\nimport {\n  StatusBar,\n  SafeAreaView,\n  View,\n  Pressable,\n  Image,\n  useWindowDimensions,\n  FlatList,\n  ListRenderItemInfo\n} from \"react-native\";\nimport styles from \"./SelfqrDescriptionStyles\";\nimport { Header } from \"../../components/basics/header\";\nimport { Footer } from \"../../components/basics/footer\";\nimport { colors } from \"../../styles/color\";\nimport { HiraginoKakuText } from \"../../components/StyledText\";\nimport { NavigationProp, useRoute } from \"@react-navigation/native\";\nimport { SelfqrDescriptionParams } from \"./SelfqrDescriptionParams\";\nimport { SelectReceptionMethodParams } from \"../select-reception-method/SelectReceptionMethodParams\";\nimport { SelfqrScannerParams } from \"../selfqr-scanner/SelfqrScannerParams\";\nimport { GestureHandlerRootView, GestureDetector, Gesture } from 'react-native-gesture-handler';\nimport { useSharedValue, withSpring, runOnJS } from 'react-native-reanimated';\nimport { ActivityLogger } from \"../../log/ActivityLogger\";\n\ntype Props = {\n  navigation: NavigationProp<any, any>;\n};\n\ntype Params = {\n  selfqrDescriptionParams: SelfqrDescriptionParams;\n};\n\nconst slides = [\n  {\n    id: \"1\",\n    text: \"[自治体アプリ]を起動して、自己QRをタップ\",\n    image: require(\"../../assets/images/firstCarousel.png\"),\n  },\n  {\n    id: \"2\",\n    text: \"受付する人を選んで、自己QRを表示するをタップ\",\n    image: require(\"../../assets/images/secondCarousel.png\"),\n  },\n  {\n    id: \"3\",\n    text: \"自己QRが表示されます。読み取りへ進んでください\",\n    image: require(\"../../assets/images/thirdCarousel.png\"),\n  },\n];\n\nconst Onboarding = ({\n  currentIndex,\n  scrollToIndex,\n  slides,\n}: {\n  currentIndex: number;\n  setCurrentIndex: React.Dispatch<SetStateAction<number>>;\n  scrollToIndex: (index: number) => void;\n  slides: any[];\n}) => {\n  const slidesRef = useRef<FlatList<any> | null>(null);\n  const { width } = useWindowDimensions();\n  const translationX = useSharedValue(0);\n\n  const Item = ({\n    currentIndex,\n  }: {\n    item: any;\n    currentIndex: number;\n  }) => {\n    const currentText = slides[currentIndex].text;\n    const currentImage = slides[currentIndex].image;\n\n    return (\n      <View>\n        <View style={styles.bodyHeading}>\n          <HiraginoKakuText style={styles.bodyHeadingText}>\n            {currentText}\n          </HiraginoKakuText>\n        </View>\n        <View style={styles.bodyImageContainer}>\n          <Image\n            source={currentImage}\n            style={[styles.bodyImage, { width, resizeMode: \"contain\" }]}\n          />\n        </View>\n      </View>\n    );\n  };\n\n  const _renderItem = (listRenderItemInfo: ListRenderItemInfo<any>) => {\n    return <Item item={listRenderItemInfo.item} currentIndex={currentIndex} />;\n  };\n\n  const viewConfig = useRef({ viewAreaCoveragePercentThreshold: 50 }).current;\n\n  const swipeGesture = Gesture.Pan()\n    .onUpdate((event) => {\n      translationX.value = event.translationX;\n    })\n    .onEnd((event) => {\n      if (event.translationX < 0 && currentIndex < slides.length - 1) {\n        runOnJS(scrollToIndex)(currentIndex + 1);\n      } else if (event.translationX > 0 && currentIndex > 0) {\n        runOnJS(scrollToIndex)(currentIndex - 1);\n      }\n      translationX.value = withSpring(0);\n    });\n\n  return (\n    <GestureHandlerRootView>\n      <GestureDetector gesture={swipeGesture}>\n        <FlatList\n          data={slides}\n          renderItem={_renderItem}\n          keyExtractor={(item) => item.id}\n          horizontal\n          showsHorizontalScrollIndicator={false}\n          pagingEnabled\n          bounces={false}\n          scrollEventThrottle={32}\n          viewabilityConfig={viewConfig}\n          ref={(ref) => {\n            slidesRef.current = ref;\n          }}\n        />\n      </GestureDetector>\n    </GestureHandlerRootView>\n  );\n};\n\nexport const SelfqrDescription = ({ navigation }: Props) => {\n  const route = useRoute();\n  let { selfqrDescriptionParams } = route.params as Params;\n\n  const [currentIndex, setCurrentIndex] = useState<number>(0);\n  const flatListRef = useRef<FlatList<any> | null>(null);\n\n  useEffect(() => {\n    ActivityLogger.insertInfoLogEntry(selfqrDescriptionParams.user, 'SelfqrDescription', 'useEffect', 'screen open');\n  }, []);\n\n  const scrollToIndex = (index: number) => {\n    flatListRef.current?.scrollToIndex({ animated: true, index: index });\n    setCurrentIndex(index);\n  };\n\n  const scrollToPrevious = () => {\n    if (currentIndex > 0) {\n      scrollToIndex(currentIndex - 1);\n    } else if (currentIndex === 0) {\n      const selectReceptionMethodParams = new SelectReceptionMethodParams();\n      selectReceptionMethodParams.eventId = selfqrDescriptionParams.eventId;\n      selectReceptionMethodParams.venueId = selfqrDescriptionParams.venueId;\n      selectReceptionMethodParams.user = selfqrDescriptionParams.user;\n      selectReceptionMethodParams.receptionTypeCode =\n        selfqrDescriptionParams.receptionTypeCode;\n\n      navigation.navigate(\"SelectReceptionMethod\", {\n        selectReceptionMethodParams,\n      });\n    }\n  };\n\n  const scrollToNext = () => {\n    if (currentIndex < slides.length - 1) {\n      scrollToIndex(currentIndex + 1);\n    }\n  };\n\n  const handleReadButton = () => {\n    const selfqrScannerParams = new SelfqrScannerParams();\n    selfqrScannerParams.user = selfqrDescriptionParams.user;\n    selfqrScannerParams.eventId = selfqrDescriptionParams.eventId;\n    selfqrScannerParams.venueId = selfqrDescriptionParams.venueId;\n    selfqrScannerParams.receptionTypeCode =\n      selfqrDescriptionParams.receptionTypeCode;\n    navigation.navigate(\"SelfqrScanner\", {\n      selfqrScannerParams,\n    });\n  };\n\n  const handleSelectReceptionMethod = () => {\n    const selectReceptionMethodParams = new SelectReceptionMethodParams();\n    selectReceptionMethodParams.eventId = selfqrDescriptionParams.eventId;\n    selectReceptionMethodParams.venueId = selfqrDescriptionParams.venueId;\n    selectReceptionMethodParams.user.userId =\n      selfqrDescriptionParams.user.userId;\n    selectReceptionMethodParams.receptionTypeCode =\n      selfqrDescriptionParams.receptionTypeCode;\n\n    navigation.navigate(\"SelectReceptionMethod\", {\n      selectReceptionMethodParams,\n    });\n  };\n\n  return (\n    <SafeAreaView style={styles.mainContainer}>\n      <StatusBar barStyle=\"dark-content\" />\n      <Header\n        titleName=\"自己QRで受付\"\n        buttonName=\"受付をやめる\"\n        onPress={handleSelectReceptionMethod}\n      ></Header>\n      <View style={styles.slideContainer}>\n        <Onboarding\n          currentIndex={currentIndex}\n          setCurrentIndex={setCurrentIndex}\n          scrollToIndex={scrollToIndex}\n          slides={slides}\n        />\n      </View>\n      <View style={styles.dotView}>\n        {slides.map(({ }, index: number) => (\n          <Pressable\n            key={index.toString()}\n            style={[\n              styles.circle,\n              {\n                backgroundColor:\n                  index === currentIndex\n                    ? colors.activeCarouselColor\n                    : colors.gray,\n              },\n            ]}\n            onPress={() => scrollToIndex(index)}\n          />\n        ))}\n      </View>\n      <Footer\n        currentIndex={currentIndex}\n        slides={slides}\n        hasNextButton={true}\n        onPressPrevious={scrollToPrevious}\n        onPressNext={scrollToNext}\n        onPress={handleReadButton}\n      />\n    </SafeAreaView>\n  );\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}