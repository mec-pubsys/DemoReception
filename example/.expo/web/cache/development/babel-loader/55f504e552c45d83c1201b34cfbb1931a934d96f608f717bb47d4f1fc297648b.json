{"ast":null,"code":"\"use strict\";\n\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nimport { BaseGesture } from \"./gesture\";\nexport var TapGesture = function (_BaseGesture) {\n  _inherits(TapGesture, _BaseGesture);\n  var _super = _createSuper(TapGesture);\n  function TapGesture() {\n    var _this;\n    _classCallCheck(this, TapGesture);\n    _this = _super.call(this);\n    _this.config = {};\n    _this.handlerName = 'TapGestureHandler';\n    _this.shouldCancelWhenOutside(true);\n    return _this;\n  }\n  _createClass(TapGesture, [{\n    key: \"minPointers\",\n    value: function minPointers(_minPointers) {\n      this.config.minPointers = _minPointers;\n      return this;\n    }\n  }, {\n    key: \"numberOfTaps\",\n    value: function numberOfTaps(count) {\n      this.config.numberOfTaps = count;\n      return this;\n    }\n  }, {\n    key: \"maxDistance\",\n    value: function maxDistance(maxDist) {\n      this.config.maxDist = maxDist;\n      return this;\n    }\n  }, {\n    key: \"maxDuration\",\n    value: function maxDuration(duration) {\n      this.config.maxDurationMs = duration;\n      return this;\n    }\n  }, {\n    key: \"maxDelay\",\n    value: function maxDelay(delay) {\n      this.config.maxDelayMs = delay;\n      return this;\n    }\n  }, {\n    key: \"maxDeltaX\",\n    value: function maxDeltaX(delta) {\n      this.config.maxDeltaX = delta;\n      return this;\n    }\n  }, {\n    key: \"maxDeltaY\",\n    value: function maxDeltaY(delta) {\n      this.config.maxDeltaY = delta;\n      return this;\n    }\n  }]);\n  return TapGesture;\n}(BaseGesture);","map":{"version":3,"names":["BaseGesture","TapGesture","_BaseGesture","_inherits","_super","_createSuper","_this","_classCallCheck","call","config","handlerName","shouldCancelWhenOutside","_createClass","key","value","minPointers","numberOfTaps","count","maxDistance","maxDist","maxDuration","duration","maxDurationMs","maxDelay","delay","maxDelayMs","maxDeltaX","delta","maxDeltaY"],"sources":["/home/runner/work/DemoReception/DemoReception/example/node_modules/react-native-gesture-handler/src/handlers/gestures/tapGesture.ts"],"sourcesContent":["import { BaseGestureConfig, BaseGesture } from './gesture';\nimport { TapGestureConfig } from '../TapGestureHandler';\nimport type { TapGestureHandlerEventPayload } from '../GestureHandlerEventPayload';\n\nexport class TapGesture extends BaseGesture<TapGestureHandlerEventPayload> {\n  public config: BaseGestureConfig & TapGestureConfig = {};\n\n  constructor() {\n    super();\n\n    this.handlerName = 'TapGestureHandler';\n    this.shouldCancelWhenOutside(true);\n  }\n\n  /**\n   * Minimum number of pointers (fingers) required to be placed before the gesture activates.\n   * Should be a positive integer. The default value is 1.\n   * @param minPointers\n   */\n  minPointers(minPointers: number) {\n    this.config.minPointers = minPointers;\n    return this;\n  }\n\n  /**\n   * Number of tap gestures required to activate the gesture.\n   * The default value is 1.\n   * @param count\n   */\n  numberOfTaps(count: number) {\n    this.config.numberOfTaps = count;\n    return this;\n  }\n\n  /**\n   * Maximum distance, expressed in points, that defines how far the finger is allowed to travel during a tap gesture.\n   * @param maxDist\n   * @see https://docs.swmansion.com/react-native-gesture-handler/docs/gestures/tap-gesture#maxdistancevalue-number\n   */\n  maxDistance(maxDist: number) {\n    this.config.maxDist = maxDist;\n    return this;\n  }\n\n  /**\n   * Maximum time, expressed in milliseconds, that defines how fast a finger must be released after a touch.\n   * The default value is 500.\n   * @param duration\n   */\n  maxDuration(duration: number) {\n    this.config.maxDurationMs = duration;\n    return this;\n  }\n\n  /**\n   * Maximum time, expressed in milliseconds, that can pass before the next tap â€” if many taps are required.\n   * The default value is 500.\n   * @param delay\n   */\n  maxDelay(delay: number) {\n    this.config.maxDelayMs = delay;\n    return this;\n  }\n\n  /**\n   * Maximum distance, expressed in points, that defines how far the finger is allowed to travel along the X axis during a tap gesture.\n   * @param delta\n   * @see https://docs.swmansion.com/react-native-gesture-handler/docs/gestures/tap-gesture#maxdeltaxvalue-number\n   */\n  maxDeltaX(delta: number) {\n    this.config.maxDeltaX = delta;\n    return this;\n  }\n\n  /**\n   * Maximum distance, expressed in points, that defines how far the finger is allowed to travel along the Y axis during a tap gesture.\n   * @param delta\n   * @see https://docs.swmansion.com/react-native-gesture-handler/docs/gestures/tap-gesture#maxdeltayvalue-number\n   */\n  maxDeltaY(delta: number) {\n    this.config.maxDeltaY = delta;\n    return this;\n  }\n}\n\nexport type TapGestureType = InstanceType<typeof TapGesture>;\n"],"mappings":";;;;;;;;;AAAA,SAA4BA,WAAW;AAIvC,WAAaC,UAAU,aAAAC,YAAA;EAAAC,SAAA,CAAAF,UAAA,EAAAC,YAAA;EAAA,IAAAE,MAAA,GAAAC,YAAA,CAAAJ,UAAA;EAGrB,SAAAA,WAAA,EAAc;IAAA,IAAAK,KAAA;IAAAC,eAAA,OAAAN,UAAA;IACZK,KAAA,GAAAF,MAAA,CAAAI,IAAA;IAAOF,KAAA,CAHFG,MAAM,GAAyC,CAAC,CAAC;IAKtDH,KAAA,CAAKI,WAAW,GAAG,mBAAmB;IACtCJ,KAAA,CAAKK,uBAAuB,CAAC,IAAI,CAAC;IAAA,OAAAL,KAAA;EACpC;EAAAM,YAAA,CAAAX,UAAA;IAAAY,GAAA;IAAAC,KAAA,EAOA,SAAAC,YAAYA,YAAmB,EAAE;MAC/B,IAAI,CAACN,MAAM,CAACM,WAAW,GAAGA,YAAW;MACrC,OAAO,IAAI;IACb;EAAA;IAAAF,GAAA;IAAAC,KAAA,EAOA,SAAAE,aAAaC,KAAa,EAAE;MAC1B,IAAI,CAACR,MAAM,CAACO,YAAY,GAAGC,KAAK;MAChC,OAAO,IAAI;IACb;EAAA;IAAAJ,GAAA;IAAAC,KAAA,EAOA,SAAAI,YAAYC,OAAe,EAAE;MAC3B,IAAI,CAACV,MAAM,CAACU,OAAO,GAAGA,OAAO;MAC7B,OAAO,IAAI;IACb;EAAA;IAAAN,GAAA;IAAAC,KAAA,EAOA,SAAAM,YAAYC,QAAgB,EAAE;MAC5B,IAAI,CAACZ,MAAM,CAACa,aAAa,GAAGD,QAAQ;MACpC,OAAO,IAAI;IACb;EAAA;IAAAR,GAAA;IAAAC,KAAA,EAOA,SAAAS,SAASC,KAAa,EAAE;MACtB,IAAI,CAACf,MAAM,CAACgB,UAAU,GAAGD,KAAK;MAC9B,OAAO,IAAI;IACb;EAAA;IAAAX,GAAA;IAAAC,KAAA,EAOA,SAAAY,UAAUC,KAAa,EAAE;MACvB,IAAI,CAAClB,MAAM,CAACiB,SAAS,GAAGC,KAAK;MAC7B,OAAO,IAAI;IACb;EAAA;IAAAd,GAAA;IAAAC,KAAA,EAOA,SAAAc,UAAUD,KAAa,EAAE;MACvB,IAAI,CAAClB,MAAM,CAACmB,SAAS,GAAGD,KAAK;MAC7B,OAAO,IAAI;IACb;EAAA;EAAA,OAAA1B,UAAA;AAAA,EA9E8BD,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}