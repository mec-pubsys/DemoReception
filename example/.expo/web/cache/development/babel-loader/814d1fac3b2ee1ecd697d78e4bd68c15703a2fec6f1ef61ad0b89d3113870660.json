{"ast":null,"code":"'use strict';\n\nimport { useCallback, useEffect, useRef } from 'react';\nimport { logger } from \"../logger/index.js\";\nimport { isWeb } from \"../PlatformChecker.js\";\nimport { useEvent } from \"./useEvent.js\";\nimport { useSharedValue } from \"./useSharedValue.js\";\nvar IS_WEB = isWeb();\nvar NOT_INITIALIZED_WARNING = 'animatedRef is not initialized in useScrollViewOffset. Make sure to pass the animated ref to the scrollable component to get scroll offset updates.';\nexport var useScrollViewOffset = IS_WEB ? useScrollViewOffsetWeb : useScrollViewOffsetNative;\nfunction useScrollViewOffsetWeb(animatedRef, providedOffset) {\n  var internalOffset = useSharedValue(0);\n  var offset = useRef(providedOffset != null ? providedOffset : internalOffset).current;\n  var eventHandler = useCallback(function () {\n    'worklet';\n\n    if (animatedRef) {\n      var element = getWebScrollableElement(animatedRef.current);\n      offset.value = element.scrollLeft === 0 ? element.scrollTop : element.scrollLeft;\n    }\n  }, [animatedRef, offset]);\n  useEffect(function () {\n    if (!animatedRef) {\n      return;\n    }\n    return animatedRef.observe(function (tag) {\n      if (!tag) {\n        logger.warn(NOT_INITIALIZED_WARNING);\n        return;\n      }\n      var element = getWebScrollableElement(animatedRef.current);\n      element.addEventListener('scroll', eventHandler);\n      return function () {\n        element.removeEventListener('scroll', eventHandler);\n      };\n    });\n  }, [animatedRef, eventHandler]);\n  return offset;\n}\nfunction useScrollViewOffsetNative(animatedRef, providedOffset) {\n  var internalOffset = useSharedValue(0);\n  var offset = useRef(providedOffset != null ? providedOffset : internalOffset).current;\n  var eventHandler = useEvent(function (event) {\n    'worklet';\n\n    offset.value = event.contentOffset.x === 0 ? event.contentOffset.y : event.contentOffset.x;\n  }, scrollNativeEventNames);\n  useEffect(function () {\n    if (!animatedRef) {\n      return;\n    }\n    return animatedRef.observe(function (tag) {\n      if (!tag) {\n        logger.warn(NOT_INITIALIZED_WARNING);\n        return;\n      }\n      eventHandler.workletEventHandler.registerForEvents(tag);\n      return function () {\n        eventHandler.workletEventHandler.unregisterFromEvents(tag);\n      };\n    });\n  }, [animatedRef, eventHandler]);\n  return offset;\n}\nfunction getWebScrollableElement(scrollComponent) {\n  var _scrollComponent$getS;\n  return (_scrollComponent$getS = scrollComponent == null ? void 0 : scrollComponent.getScrollableNode()) != null ? _scrollComponent$getS : scrollComponent;\n}\nvar scrollNativeEventNames = ['onScroll', 'onScrollBeginDrag', 'onScrollEndDrag', 'onMomentumScrollBegin', 'onMomentumScrollEnd'];","map":{"version":3,"names":["useCallback","useEffect","useRef","logger","isWeb","useEvent","useSharedValue","IS_WEB","NOT_INITIALIZED_WARNING","useScrollViewOffset","useScrollViewOffsetWeb","useScrollViewOffsetNative","animatedRef","providedOffset","internalOffset","offset","current","eventHandler","element","getWebScrollableElement","value","scrollLeft","scrollTop","observe","tag","warn","addEventListener","removeEventListener","event","contentOffset","x","y","scrollNativeEventNames","workletEventHandler","registerForEvents","unregisterFromEvents","scrollComponent","_scrollComponent$getS","getScrollableNode"],"sources":["/home/runner/work/DemoReception/DemoReception/example/node_modules/react-native-reanimated/src/hook/useScrollViewOffset.ts"],"sourcesContent":["'use strict';\nimport { useCallback, useEffect, useRef } from 'react';\n\nimport type { SharedValue } from '../commonTypes';\nimport type { AnimatedScrollView } from '../component/ScrollView';\nimport { logger } from '../logger';\nimport { isWeb } from '../PlatformChecker';\nimport type {\n  AnimatedRef,\n  ReanimatedScrollEvent,\n  RNNativeScrollEvent,\n} from './commonTypes';\nimport type { EventHandlerInternal } from './useEvent';\nimport { useEvent } from './useEvent';\nimport { useSharedValue } from './useSharedValue';\n\nconst IS_WEB = isWeb();\n\nconst NOT_INITIALIZED_WARNING =\n  'animatedRef is not initialized in useScrollViewOffset. Make sure to pass the animated ref to the scrollable component to get scroll offset updates.';\n\n/**\n * Lets you synchronously get the current offset of a `ScrollView`.\n *\n * @param animatedRef - An [animated\n *   ref](https://docs.swmansion.com/react-native-reanimated/docs/core/useAnimatedRef)\n *   attached to an Animated.ScrollView component.\n * @returns A shared value which holds the current offset of the `ScrollView`.\n * @see https://docs.swmansion.com/react-native-reanimated/docs/scroll/useScrollViewOffset\n */\nexport const useScrollViewOffset = IS_WEB\n  ? useScrollViewOffsetWeb\n  : useScrollViewOffsetNative;\n\nfunction useScrollViewOffsetWeb(\n  animatedRef: AnimatedRef<AnimatedScrollView> | null,\n  providedOffset?: SharedValue<number>\n): SharedValue<number> {\n  const internalOffset = useSharedValue(0);\n  const offset = useRef(providedOffset ?? internalOffset).current;\n\n  const eventHandler = useCallback(() => {\n    'worklet';\n    if (animatedRef) {\n      const element = getWebScrollableElement(animatedRef.current);\n      // scrollLeft is the X axis scrolled offset, works properly also with RTL layout\n      offset.value =\n        element.scrollLeft === 0 ? element.scrollTop : element.scrollLeft;\n    }\n  }, [animatedRef, offset]);\n\n  useEffect(() => {\n    if (!animatedRef) {\n      return;\n    }\n\n    return animatedRef.observe((tag) => {\n      if (!tag) {\n        logger.warn(NOT_INITIALIZED_WARNING);\n        return;\n      }\n\n      const element = getWebScrollableElement(animatedRef.current);\n      element.addEventListener('scroll', eventHandler);\n\n      return () => {\n        element.removeEventListener('scroll', eventHandler);\n      };\n    });\n  }, [animatedRef, eventHandler]);\n\n  return offset;\n}\n\nfunction useScrollViewOffsetNative(\n  animatedRef: AnimatedRef<AnimatedScrollView> | null,\n  providedOffset?: SharedValue<number>\n): SharedValue<number> {\n  const internalOffset = useSharedValue(0);\n  const offset = useRef(providedOffset ?? internalOffset).current;\n\n  const eventHandler = useEvent<RNNativeScrollEvent>(\n    (event: ReanimatedScrollEvent) => {\n      'worklet';\n      offset.value =\n        event.contentOffset.x === 0\n          ? event.contentOffset.y\n          : event.contentOffset.x;\n    },\n    scrollNativeEventNames\n    // Read https://github.com/software-mansion/react-native-reanimated/pull/5056\n    // for more information about this cast.\n  ) as unknown as EventHandlerInternal<ReanimatedScrollEvent>;\n\n  useEffect(() => {\n    if (!animatedRef) {\n      return;\n    }\n\n    return animatedRef.observe((tag) => {\n      if (!tag) {\n        logger.warn(NOT_INITIALIZED_WARNING);\n        return;\n      }\n\n      eventHandler.workletEventHandler.registerForEvents(tag);\n      return () => {\n        eventHandler.workletEventHandler.unregisterFromEvents(tag);\n      };\n    });\n  }, [animatedRef, eventHandler]);\n\n  return offset;\n}\n\nfunction getWebScrollableElement(\n  scrollComponent: AnimatedScrollView | null\n): HTMLElement {\n  return (\n    (scrollComponent?.getScrollableNode() as unknown as HTMLElement) ??\n    scrollComponent\n  );\n}\n\nconst scrollNativeEventNames = [\n  'onScroll',\n  'onScrollBeginDrag',\n  'onScrollEndDrag',\n  'onMomentumScrollBegin',\n  'onMomentumScrollEnd',\n];\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}