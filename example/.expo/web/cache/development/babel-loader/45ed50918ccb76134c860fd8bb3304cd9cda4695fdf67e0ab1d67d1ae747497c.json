{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState, useEffect, useRef } from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport StatusBar from \"react-native-web/dist/exports/StatusBar\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { Camera } from \"expo-camera\";\nimport { Header } from \"../../components/basics/header\";\nimport { Footer } from \"../../components/basics/footer\";\nimport { selfqrScannerstyles } from \"./SelfqrScannerStyles\";\nimport { useRoute } from \"@react-navigation/native\";\nimport { captureRef } from \"react-native-view-shot\";\nimport { Html5QrcodeScanType, Html5QrcodeScanner } from \"html5-qrcode\";\nimport { CheckInConfirmationParams } from \"../check-in-confirmation/CheckInConfirmationParams\";\nimport { SelectReceptionMethodParams } from \"../select-reception-method/SelectReceptionMethodParams\";\nimport { GroupCheckInConfirmationParams } from \"../group-check-in-confirmation/GroupCheckInConfirmationParams\";\nimport { decryptDecodedText, resetDecryptionState, getRelationshipInfo } from \"./SelfqrScannerService\";\nimport { EntrantRecord } from \"../../models/EntrantRecord\";\nimport { HiraginoKakuText } from \"../../components/StyledText\";\nimport { ActivityLogger } from \"../../log/ActivityLogger\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport var SelfqrScanner = function SelfqrScanner(_ref) {\n  var navigation = _ref.navigation;\n  var route = useRoute();\n  var _ref2 = route.params,\n    selfqrScannerParams = _ref2.selfqrScannerParams;\n  var _useState = useState(null),\n    _useState2 = _slicedToArray(_useState, 2),\n    hasPermission = _useState2[0],\n    setHasPermission = _useState2[1];\n  var _useState3 = useState(false),\n    _useState4 = _slicedToArray(_useState3, 2),\n    scanned = _useState4[0],\n    setScanned = _useState4[1];\n  var _useState5 = useState(false),\n    _useState6 = _slicedToArray(_useState5, 2),\n    isScannerReady = _useState6[0],\n    setIsScannerReady = _useState6[1];\n  var _useState7 = useState([]),\n    _useState8 = _slicedToArray(_useState7, 2),\n    capturedImages = _useState8[0],\n    setCapturedImages = _useState8[1];\n  var _useState9 = useState(),\n    _useState10 = _slicedToArray(_useState9, 2),\n    countOfQrViews = _useState10[0],\n    setCountOfQrViews = _useState10[1];\n  var _useState11 = useState(\"\"),\n    _useState12 = _slicedToArray(_useState11, 2),\n    toggleMsg = _useState12[0],\n    setToggleMsg = _useState12[1];\n  var timeoutRef = useRef(null);\n  var qrCodeScannerRef = useRef(null);\n  var readerRef = useRef(null);\n  var _useState13 = useState(null),\n    _useState14 = _slicedToArray(_useState13, 2),\n    isScanning = _useState14[0],\n    setIsScanning = _useState14[1];\n  var styles = selfqrScannerstyles(isScanning);\n  useEffect(function () {\n    ActivityLogger.insertInfoLogEntry(selfqrScannerParams.user, 'SelfqrScanner', 'useEffect', 'screen open');\n  }, []);\n  useEffect(function () {\n    if (hasPermission && Platform.OS !== \"ios\") {\n      setIsScannerReady(true);\n    }\n  }, [hasPermission, countOfQrViews]);\n  useEffect(function () {\n    if (isScannerReady) {\n      var intervalId;\n      var stateCheckIntervalId;\n      var scanningTimeout;\n      var state = 0;\n      var config = {\n        fps: 30,\n        rememberLastUsedCamera: true,\n        supportedScanTypes: [Html5QrcodeScanType.SCAN_TYPE_CAMERA]\n      };\n      qrCodeScannerRef.current = new Html5QrcodeScanner(\"reader\", config, false);\n      qrCodeScannerRef.current.render(qrCodeSuccessCallback, qrCodeErrorCallback);\n      stateCheckIntervalId = setInterval(function () {\n        if (qrCodeScannerRef.current) {\n          state = qrCodeScannerRef.current.getState();\n        }\n        if (state === 2 && !isScanning) {\n          setIsScanning(true);\n        } else if (state !== 2 && isScanning) {\n          setIsScanning(false);\n        }\n      }, 1000);\n      intervalId = setInterval(function () {\n        if (state === 2) {\n          setIsScanning(function (prev) {\n            return !prev;\n          });\n        }\n      }, 6000);\n      scanningTimeout = setTimeout(function () {\n        var _qrCodeScannerRef$cur;\n        (_qrCodeScannerRef$cur = qrCodeScannerRef.current) == null ? void 0 : _qrCodeScannerRef$cur.pause();\n        setIsScanning(false);\n      }, 300000);\n      return function () {\n        clearInterval(stateCheckIntervalId);\n        clearInterval(intervalId);\n        if (qrCodeScannerRef.current) {\n          qrCodeScannerRef.current.clear();\n        }\n      };\n    }\n    resetDecryptionState();\n    _asyncToGenerator(function* () {\n      var _yield$Camera$request = yield Camera.requestCameraPermissionsAsync(),\n        status = _yield$Camera$request.status;\n      setHasPermission(status === \"granted\");\n    })();\n  }, [isScannerReady]);\n  var qrCodeSuccessCallback = function () {\n    var _ref4 = _asyncToGenerator(function* (decodedText) {\n      var decryptedQ4, decryptedQ3;\n      var decryptedQ2 = 0;\n      var result = decryptDecodedText(decodedText);\n      if (\"error\" in result) {\n        var _qrCodeScannerRef$cur2;\n        console.error(\"Error from tsx:\", result.error);\n        (_qrCodeScannerRef$cur2 = qrCodeScannerRef.current) == null ? void 0 : _qrCodeScannerRef$cur2.pause();\n        setIsScanning(false);\n      } else if (result.message && result.Q2) {\n        console.log(result.message);\n        decryptedQ2 = +result.Q2;\n        if (readerRef.current) {\n          var uri = yield captureRef(readerRef, {\n            format: \"png\",\n            quality: 0.8\n          });\n          setCapturedImages(function (prevImages) {\n            return [].concat(_toConsumableArray(prevImages), [uri]);\n          });\n          setCountOfQrViews(decryptedQ2);\n        }\n      } else if (result.warning) {\n        setToggleMsg(\"QRコードはすでにスキャンされています。\");\n        if (timeoutRef.current) {\n          clearTimeout(timeoutRef.current);\n        }\n        timeoutRef.current = setTimeout(function () {\n          setToggleMsg(\"\");\n        }, 3000);\n      } else if (result.data) {\n        decryptedQ2 = +result.data.Q2;\n        decryptedQ3 = result.data.Q3;\n        decryptedQ4 = result.data.Q4;\n        if (decryptedQ4 && decryptedQ3) {\n          var Q4json = JSON.parse(decryptedQ4);\n          var Q3json = JSON.parse(decryptedQ3);\n          var lgapId = Q3json[\"h3\"];\n          var userRank = Q3json[\"h4\"];\n          var fullName = Q4json[\"1\"][\"2\"];\n          var fullNameKana = Q4json[\"1\"][\"3\"];\n          var dateOfBirth = Q4json[\"1\"][\"4\"];\n          var postalCode = Q4json[\"1\"][\"9\"];\n          var address = Q4json[\"1\"][\"7\"];\n          var _fullName$split = fullName.split(\" \"),\n            _fullName$split2 = _slicedToArray(_fullName$split, 2),\n            lastName = _fullName$split2[0],\n            firstName = _fullName$split2[1];\n          var _fullNameKana$split = fullNameKana.split(\" \"),\n            _fullNameKana$split2 = _slicedToArray(_fullNameKana$split, 2),\n            lastNameKana = _fullNameKana$split2[0],\n            firstNameKana = _fullNameKana$split2[1];\n          var genderCode;\n          if (Q4json[\"1\"].hasOwnProperty(\"6\")) {\n            if (Q4json[\"1\"][\"6\"] === \"1\") {\n              genderCode = \"0\";\n            } else {\n              genderCode = Q4json[\"1\"][\"5\"];\n            }\n          } else if (Q4json[\"1\"][\"5\"] == null) {\n            genderCode = \"1\";\n          } else {\n            genderCode = Q4json[\"1\"][\"5\"];\n          }\n          var year = dateOfBirth.substring(0, 4);\n          var month = dateOfBirth.substring(4, 6);\n          var day = dateOfBirth.substring(6, 8);\n          var formattedDate = `${year}-${month}-${day}`;\n          var firstPart = postalCode.substring(0, 3);\n          var secondPart = postalCode.substring(3, 7);\n          var formattedPostalCode = `${firstPart}-${secondPart}`;\n          try {\n            if (decryptedQ2 && Q4json) {\n              if (qrCodeScannerRef.current) {\n                var _qrCodeScannerRef$cur3;\n                yield (_qrCodeScannerRef$cur3 = qrCodeScannerRef.current) == null ? void 0 : _qrCodeScannerRef$cur3.clear();\n              }\n              if (!Q4json[\"1\"].hasOwnProperty(\"10\")) {\n                var checkInConfirmationParams = new CheckInConfirmationParams();\n                checkInConfirmationParams.user = selfqrScannerParams.user;\n                checkInConfirmationParams.eventId = selfqrScannerParams.eventId;\n                checkInConfirmationParams.venueId = selfqrScannerParams.venueId;\n                checkInConfirmationParams.isScanner = true;\n                checkInConfirmationParams.entrantRecord.originalEntrant.lgapId = lgapId;\n                checkInConfirmationParams.entrantRecord.originalEntrant.userRank = userRank;\n                checkInConfirmationParams.entrantRecord.originalEntrant.firstName = firstName;\n                checkInConfirmationParams.entrantRecord.originalEntrant.lastName = lastName;\n                checkInConfirmationParams.entrantRecord.originalEntrant.firstNameKana = firstNameKana;\n                checkInConfirmationParams.entrantRecord.originalEntrant.lastNameKana = lastNameKana;\n                checkInConfirmationParams.entrantRecord.originalEntrant.dateOfBirth = new Date(formattedDate);\n                checkInConfirmationParams.entrantRecord.originalEntrant.postalCode = formattedPostalCode;\n                checkInConfirmationParams.entrantRecord.originalEntrant.genderCode = genderCode;\n                checkInConfirmationParams.entrantRecord.originalEntrant.address = address;\n                checkInConfirmationParams.entrantRecord.originalEntrant.familyOrderNumber = 0;\n                checkInConfirmationParams.entrantRecord.originalEntrant.receptionTypeCode = selfqrScannerParams.receptionTypeCode;\n                checkInConfirmationParams.entrantRecord.modifiedEntrant = checkInConfirmationParams.entrantRecord.originalEntrant;\n                navigation.navigate(\"CheckInConfirmation\", {\n                  checkInConfirmationParams: checkInConfirmationParams\n                });\n                ActivityLogger.insertInfoLogEntry(selfqrScannerParams.user, 'SelfqrScanner', 'qrCodeSuccessCallback', 'transition', 'CheckInConfirmation', checkInConfirmationParams);\n              } else {\n                if (qrCodeScannerRef.current) {\n                  var _qrCodeScannerRef$cur4;\n                  yield (_qrCodeScannerRef$cur4 = qrCodeScannerRef.current) == null ? void 0 : _qrCodeScannerRef$cur4.clear();\n                }\n                if (readerRef.current) {\n                  var _uri = yield captureRef(readerRef, {\n                    format: \"png\",\n                    quality: 0.8\n                  });\n                  setCapturedImages(function (prevImages) {\n                    return [].concat(_toConsumableArray(prevImages), [_uri]);\n                  });\n                }\n                var groupCheckInConfirmationParams = new GroupCheckInConfirmationParams();\n                groupCheckInConfirmationParams.user = selfqrScannerParams.user;\n                groupCheckInConfirmationParams.eventId = selfqrScannerParams.eventId;\n                groupCheckInConfirmationParams.venueId = selfqrScannerParams.venueId;\n                groupCheckInConfirmationParams.isScanner = true;\n                groupCheckInConfirmationParams.selectedEntrantIndex = 1;\n                var entrantRecordList = groupCheckInConfirmationParams.entrantRecordList;\n                var entrant = new EntrantRecord();\n                entrant.originalEntrant.lgapId = lgapId;\n                entrant.originalEntrant.userRank = userRank;\n                entrant.originalEntrant.firstName = firstName;\n                entrant.originalEntrant.lastName = lastName;\n                entrant.originalEntrant.firstNameKana = firstNameKana;\n                entrant.originalEntrant.lastNameKana = lastNameKana;\n                entrant.originalEntrant.dateOfBirth = new Date(formattedDate);\n                entrant.originalEntrant.postalCode = formattedPostalCode;\n                entrant.originalEntrant.genderCode = genderCode;\n                entrant.originalEntrant.address = address;\n                entrant.originalEntrant.familyOrderNumber = 0;\n                entrant.originalEntrant.receptionTypeCode = selfqrScannerParams.receptionTypeCode;\n                entrant.modifiedEntrant = entrant.originalEntrant;\n                entrantRecordList.addEntrantRecord(entrant);\n                yield Promise.all(Object.values(Q4json[\"1\"][\"10\"]).map(function () {\n                  var _ref5 = _asyncToGenerator(function* (personData, index) {\n                    var _personData$105$spli = personData[\"10-5\"].split(\" \"),\n                      _personData$105$spli2 = _slicedToArray(_personData$105$spli, 2),\n                      lastName = _personData$105$spli2[0],\n                      firstName = _personData$105$spli2[1];\n                    var _personData$106$spli = personData[\"10-6\"].split(\" \"),\n                      _personData$106$spli2 = _slicedToArray(_personData$106$spli, 2),\n                      lastNameKana = _personData$106$spli2[0],\n                      firstNameKana = _personData$106$spli2[1];\n                    var birthDate = personData[\"10-7\"];\n                    var year = birthDate.substring(0, 4);\n                    var month = birthDate.substring(4, 6);\n                    var day = birthDate.substring(6, 8);\n                    var formattedDateOfBirth = `${year}-${month}-${day}`;\n                    var genderCode;\n                    if (personData[\"10-9\"] === \"1\") {\n                      genderCode = \"0\";\n                    } else {\n                      genderCode = personData[\"10-8\"];\n                    }\n                    var postalCode;\n                    if (personData[\"10-10\"] === 1) {\n                      postalCode = Q4json[\"1\"][\"9\"];\n                    } else {\n                      postalCode = personData[\"10-11\"];\n                    }\n                    var firstPart = postalCode.substring(0, 3);\n                    var secondPart = postalCode.substring(3, 7);\n                    var formattedPostalCode = `${firstPart}-${secondPart}`;\n                    var address;\n                    if (personData[\"10-10\"] === 1) {\n                      address = Q4json[\"1\"][\"7\"];\n                    } else {\n                      address = personData[\"10-12\"];\n                    }\n                    var relationship;\n                    var relationResult = yield getRelationshipInfo(personData[\"10-3\"]);\n                    if (relationResult) {\n                      if (relationResult.data[0].is_manual_entry == true) {\n                        relationship = personData[\"10-4\"];\n                      } else {\n                        relationship = relationResult.data[0].name;\n                      }\n                    } else {\n                      relationship = \"\";\n                    }\n                    var entrant = new EntrantRecord();\n                    entrant.originalEntrant.relationship = relationship;\n                    entrant.originalEntrant.firstName = firstName;\n                    entrant.originalEntrant.lastName = lastName;\n                    entrant.originalEntrant.firstNameKana = firstNameKana;\n                    entrant.originalEntrant.lastNameKana = lastNameKana;\n                    entrant.originalEntrant.dateOfBirth = new Date(formattedDateOfBirth);\n                    entrant.originalEntrant.postalCode = formattedPostalCode;\n                    entrant.originalEntrant.genderCode = genderCode;\n                    entrant.originalEntrant.address = address;\n                    entrant.originalEntrant.familyOrderNumber = parseInt(personData[\"10-2\"]);\n                    entrant.originalEntrant.receptionTypeCode = selfqrScannerParams.receptionTypeCode;\n                    entrant.modifiedEntrant = entrant.originalEntrant;\n                    entrantRecordList.addEntrantRecord(entrant);\n                  });\n                  return function (_x2, _x3) {\n                    return _ref5.apply(this, arguments);\n                  };\n                }()));\n                navigation.navigate(\"GroupCheckInConfirmation\", {\n                  groupCheckInConfirmationParams: groupCheckInConfirmationParams\n                });\n                ActivityLogger.insertInfoLogEntry(selfqrScannerParams.user, 'SelfqrScanner', 'qrCodeSuccessCallback', 'transition', 'GroupCheckInConfirmation', groupCheckInConfirmationParams);\n              }\n            }\n          } catch (e) {\n            console.error(\"Failed to parse JSON:\", e);\n          }\n        } else {\n          console.error(\"decryptedQ4 is undefined\");\n        }\n      }\n    });\n    return function qrCodeSuccessCallback(_x) {\n      return _ref4.apply(this, arguments);\n    };\n  }();\n  var qrCodeErrorCallback = function qrCodeErrorCallback(errorMessage) {\n    var err = errorMessage;\n  };\n  var handleBarcodeScanned = function handleBarcodeScanned(_ref6) {\n    var data = _ref6.data;\n    if (!scanned) {\n      setScanned(true);\n      Alert.alert(\"QR Code Scanned\", `Bar code with data ${data} has been scanned!`, [{\n        text: \"OK\",\n        onPress: function onPress() {\n          setScanned(false);\n        }\n      }], {\n        cancelable: false\n      });\n    }\n  };\n  if (hasPermission === null) {\n    return _jsx(Text, {\n      children: \"Requesting camera permission...\"\n    });\n  }\n  if (hasPermission === false) {\n    return _jsx(Text, {\n      children: \"No access to camera\"\n    });\n  }\n  var handleReturnButton = function handleReturnButton() {\n    navigation.navigate(\"SelfqrDescription\", {\n      selfqrDescriptionParams: selfqrScannerParams\n    });\n    ActivityLogger.insertInfoLogEntry(selfqrScannerParams.user, 'SelfqrScanner', 'handleReturnButton', 'transition', 'SelfqrDescription', selfqrScannerParams);\n  };\n  var handleSelectReceptionMethod = function handleSelectReceptionMethod() {\n    var selectReceptionMethodParams = new SelectReceptionMethodParams();\n    selectReceptionMethodParams.eventId = selfqrScannerParams.eventId;\n    selectReceptionMethodParams.venueId = selfqrScannerParams.venueId;\n    selectReceptionMethodParams.user = selfqrScannerParams.user;\n    selectReceptionMethodParams.receptionTypeCode = selfqrScannerParams.receptionTypeCode;\n    navigation.navigate(\"SelectReceptionMethod\", {\n      selectReceptionMethodParams: selectReceptionMethodParams\n    });\n    ActivityLogger.insertInfoLogEntry(selfqrScannerParams.user, 'SelfqrScanner', 'handleSelectReceptionMethod', 'transition', 'SelectReceptionMethod', selectReceptionMethodParams);\n  };\n  return _jsxs(SafeAreaView, {\n    style: styles.mainContainer,\n    children: [_jsx(StatusBar, {\n      barStyle: \"dark-content\"\n    }), _jsx(Header, {\n      titleName: \"\\u81EA\\u5DF1QR\\u3092\\u304B\\u3056\\u3057\\u3066\\u304F\\u3060\\u3055\\u3044\",\n      buttonName: \"\\u53D7\\u4ED8\\u3092\\u3084\\u3081\\u308B\",\n      onPress: handleSelectReceptionMethod\n    }), _jsxs(View, {\n      style: styles.container,\n      children: [_jsx(View, {\n        style: styles.leftSide,\n        children: _jsx(Image, {\n          source: require(\"../../assets/images/qrScanner.png\"),\n          style: styles.image\n        })\n      }), hasPermission && (Platform.OS === \"ios\" ? _jsxs(View, {\n        style: styles.rightSide,\n        children: [_jsxs(View, {\n          style: styles.messageContainer,\n          children: [isScanning && _jsx(Image, {\n            source: require(\"../../assets/images/qr_inprocess.png\"),\n            style: styles.scanningMessage\n          }), isScanning === false && _jsx(Image, {\n            source: require(\"../../assets/images/qr_fail.png\"),\n            style: styles.errorMessage\n          })]\n        }), _jsx(Camera, {\n          style: styles.camera,\n          type: \"back\",\n          onBarCodeScanned: handleBarcodeScanned\n        }), _jsx(View, {\n          style: [styles.corner, styles.topLeftCorner]\n        }), _jsx(View, {\n          style: [styles.corner, styles.topRightCorner]\n        }), _jsx(View, {\n          style: [styles.corner, styles.bottomLeftCorner]\n        }), _jsx(View, {\n          style: [styles.corner, styles.bottomRightCorner]\n        })]\n      }) : _jsxs(View, {\n        style: styles.rightSide,\n        children: [_jsxs(View, {\n          style: styles.messageContainer,\n          children: [isScanning && _jsx(Image, {\n            source: require(\"../../assets/images/qr_inprocess.png\"),\n            style: styles.scanningMessage\n          }), isScanning === false && _jsx(Image, {\n            source: require(\"../../assets/images/qr_fail.png\"),\n            style: styles.errorMessage\n          })]\n        }), _jsx(View, {\n          ref: readerRef,\n          style: styles.webCamContainer,\n          children: _jsx(View, {\n            id: \"reader\",\n            style: styles.webCamera\n          })\n        }), _jsx(View, {\n          style: [styles.corner, styles.topLeftCornerWeb]\n        }), _jsx(View, {\n          style: [styles.corner, styles.topRightCornerWeb]\n        }), _jsx(View, {\n          style: [styles.corner, styles.bottomLeftCornerWeb]\n        }), _jsx(View, {\n          style: [styles.corner, styles.bottomRightCornerWeb]\n        }), toggleMsg ? _jsx(View, {\n          style: styles.toggleMsgContainer,\n          children: _jsx(HiraginoKakuText, {\n            children: toggleMsg\n          })\n        }) : null, _jsxs(View, {\n          style: styles.qrPhotoContainer,\n          children: [capturedImages.slice(0, countOfQrViews || 0).map(function (uri, index) {\n            return _jsxs(View, {\n              children: [_jsx(Image, {\n                source: {\n                  uri: uri\n                },\n                style: styles.capturedImage\n              }), _jsx(HiraginoKakuText, {\n                normal: true,\n                style: styles.imageNumber,\n                children: index + 1\n              })]\n            }, index);\n          }), Array.from({\n            length: (countOfQrViews || 0) - capturedImages.length\n          }).map(function (_, index) {\n            return _jsxs(View, {\n              children: [_jsx(View, {\n                style: styles.plainView\n              }), _jsx(HiraginoKakuText, {\n                normal: true,\n                style: styles.imageNumber,\n                children: index + capturedImages.length + 1\n              })]\n            }, index + capturedImages.length);\n          })]\n        })]\n      }))]\n    }), _jsx(Footer, {\n      hasNextButton: false,\n      onPressPrevious: handleReturnButton\n    })]\n  });\n};","map":{"version":3,"names":["React","useState","useEffect","useRef","View","Image","SafeAreaView","StatusBar","Text","Alert","Platform","Camera","Header","Footer","selfqrScannerstyles","useRoute","captureRef","Html5QrcodeScanType","Html5QrcodeScanner","CheckInConfirmationParams","SelectReceptionMethodParams","GroupCheckInConfirmationParams","decryptDecodedText","resetDecryptionState","getRelationshipInfo","EntrantRecord","HiraginoKakuText","ActivityLogger","jsx","_jsx","jsxs","_jsxs","SelfqrScanner","_ref","navigation","route","_ref2","params","selfqrScannerParams","_useState","_useState2","_slicedToArray","hasPermission","setHasPermission","_useState3","_useState4","scanned","setScanned","_useState5","_useState6","isScannerReady","setIsScannerReady","_useState7","_useState8","capturedImages","setCapturedImages","_useState9","_useState10","countOfQrViews","setCountOfQrViews","_useState11","_useState12","toggleMsg","setToggleMsg","timeoutRef","qrCodeScannerRef","readerRef","_useState13","_useState14","isScanning","setIsScanning","styles","insertInfoLogEntry","user","OS","intervalId","stateCheckIntervalId","scanningTimeout","state","config","fps","rememberLastUsedCamera","supportedScanTypes","SCAN_TYPE_CAMERA","current","render","qrCodeSuccessCallback","qrCodeErrorCallback","setInterval","getState","prev","setTimeout","_qrCodeScannerRef$cur","pause","clearInterval","clear","_asyncToGenerator","_yield$Camera$request","requestCameraPermissionsAsync","status","_ref4","decodedText","decryptedQ4","decryptedQ3","decryptedQ2","result","_qrCodeScannerRef$cur2","console","error","message","Q2","log","uri","format","quality","prevImages","concat","_toConsumableArray","warning","clearTimeout","data","Q3","Q4","Q4json","JSON","parse","Q3json","lgapId","userRank","fullName","fullNameKana","dateOfBirth","postalCode","address","_fullName$split","split","_fullName$split2","lastName","firstName","_fullNameKana$split","_fullNameKana$split2","lastNameKana","firstNameKana","genderCode","hasOwnProperty","year","substring","month","day","formattedDate","firstPart","secondPart","formattedPostalCode","_qrCodeScannerRef$cur3","checkInConfirmationParams","eventId","venueId","isScanner","entrantRecord","originalEntrant","Date","familyOrderNumber","receptionTypeCode","modifiedEntrant","navigate","_qrCodeScannerRef$cur4","groupCheckInConfirmationParams","selectedEntrantIndex","entrantRecordList","entrant","addEntrantRecord","Promise","all","Object","values","map","_ref5","personData","index","_personData$105$spli","_personData$105$spli2","_personData$106$spli","_personData$106$spli2","birthDate","formattedDateOfBirth","relationship","relationResult","is_manual_entry","name","parseInt","_x2","_x3","apply","arguments","e","_x","errorMessage","err","handleBarcodeScanned","_ref6","alert","text","onPress","cancelable","children","handleReturnButton","selfqrDescriptionParams","handleSelectReceptionMethod","selectReceptionMethodParams","style","mainContainer","barStyle","titleName","buttonName","container","leftSide","source","require","image","rightSide","messageContainer","scanningMessage","camera","type","onBarCodeScanned","corner","topLeftCorner","topRightCorner","bottomLeftCorner","bottomRightCorner","ref","webCamContainer","id","webCamera","topLeftCornerWeb","topRightCornerWeb","bottomLeftCornerWeb","bottomRightCornerWeb","toggleMsgContainer","qrPhotoContainer","slice","capturedImage","normal","imageNumber","Array","from","length","_","plainView","hasNextButton","onPressPrevious"],"sources":["/home/runner/work/DemoReception/DemoReception/example/src/screens/selfqr-scanner/SelfqrScanner.tsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\nimport {\n  View,\n  Image,\n  SafeAreaView,\n  StatusBar,\n  Text,\n  Alert,\n  Platform,\n} from \"react-native\";\nimport { Camera } from \"expo-camera\";\nimport { Header } from \"../../components/basics/header\";\nimport { Footer } from \"../../components/basics/footer\";\nimport { selfqrScannerstyles } from \"./SelfqrScannerStyles\";\nimport { NavigationProp, useRoute } from \"@react-navigation/native\";\nimport { captureRef } from \"react-native-view-shot\";\nimport { Html5QrcodeScanType, Html5QrcodeScanner } from \"html5-qrcode\";\nimport { CheckInConfirmationParams } from \"../check-in-confirmation/CheckInConfirmationParams\";\nimport { SelfqrScannerParams } from \"./SelfqrScannerParams\";\nimport { SelectReceptionMethodParams } from \"../select-reception-method/SelectReceptionMethodParams\";\nimport { GroupCheckInConfirmationParams } from \"../group-check-in-confirmation/GroupCheckInConfirmationParams\";\nimport {\n  decryptDecodedText,\n  resetDecryptionState,\n  getRelationshipInfo,\n} from \"./SelfqrScannerService\";\nimport { EntrantRecord } from \"../../models/EntrantRecord\";\nimport { HiraginoKakuText } from \"../../components/StyledText\";\nimport { User } from \"../../models/User\";\nimport { ActivityLogger } from \"../../log/ActivityLogger\";\n\ntype Props = {\n  navigation: NavigationProp<any, any>;\n};\ntype Params = {\n  selfqrScannerParams: SelfqrScannerParams;\n};\nexport const SelfqrScanner = ({ navigation }: Props) => {\n  const route = useRoute();\n  let { selfqrScannerParams } = route.params as Params;\n\n  const [hasPermission, setHasPermission] = useState<boolean | null>(null);\n  const [scanned, setScanned] = useState(false);\n  const [isScannerReady, setIsScannerReady] = useState<boolean>(false);\n  const [capturedImages, setCapturedImages] = useState<string[]>([]);\n  const [countOfQrViews, setCountOfQrViews] = useState<number>();\n  const [toggleMsg, setToggleMsg] = useState(\"\");\n  const timeoutRef = useRef<NodeJS.Timeout | null>(null);\n  const qrCodeScannerRef = useRef<Html5QrcodeScanner | null>(null);\n  const readerRef = useRef(null);\n\n  const [isScanning, setIsScanning] = useState<boolean | null>(null);\n  let styles = selfqrScannerstyles(isScanning as boolean);\n\n  useEffect(() => {\n    ActivityLogger.insertInfoLogEntry(selfqrScannerParams.user, 'SelfqrScanner', 'useEffect', 'screen open');\n  }, []);\n\n  useEffect(() => {\n    if (hasPermission && Platform.OS !== \"ios\") {\n      setIsScannerReady(true);\n    }\n  }, [hasPermission, countOfQrViews]);\n\n  useEffect(() => {\n    // CONFIGs of Web Camera\n    if (isScannerReady) {\n      let intervalId: any;\n      let stateCheckIntervalId: any;\n      let scanningTimeout;\n      let state = 0;\n\n      const config = {\n        fps: 30,\n        rememberLastUsedCamera: true,\n        supportedScanTypes: [Html5QrcodeScanType.SCAN_TYPE_CAMERA],\n      };\n\n      qrCodeScannerRef.current = new Html5QrcodeScanner(\n        \"reader\",\n        config,\n        false\n      );\n      qrCodeScannerRef.current.render(\n        qrCodeSuccessCallback,\n        qrCodeErrorCallback\n      );\n\n      stateCheckIntervalId = setInterval(() => {\n        if (qrCodeScannerRef.current) {\n          state = qrCodeScannerRef.current.getState();\n        }\n\n        if (state === 2 && !isScanning) {\n          setIsScanning(true);\n        } else if (state !== 2 && isScanning) {\n          setIsScanning(false);\n        }\n      }, 1000);\n\n      intervalId = setInterval(() => {\n        if (state === 2) {\n          setIsScanning((prev) => !prev);\n        }\n      }, 6000);\n\n      scanningTimeout = setTimeout(() => {\n        qrCodeScannerRef.current?.pause();\n        setIsScanning(false);\n      }, 300000);\n\n      return () => {\n        clearInterval(stateCheckIntervalId);\n        clearInterval(intervalId);\n        if (qrCodeScannerRef.current) {\n          qrCodeScannerRef.current.clear();\n        }\n      };\n    }\n\n    // RESET\n    resetDecryptionState();\n\n    // CONFIGs of iPad\n    (async () => {\n      const { status } = await Camera.requestCameraPermissionsAsync();\n      setHasPermission(status === \"granted\");\n    })();\n  }, [isScannerReady]);\n\n  // FOR Web\n  const qrCodeSuccessCallback = async (decodedText: string) => {\n    // DECRYPTION\n    let decryptedQ4: string, decryptedQ3: string;\n    let decryptedQ2: number = 0;\n    const result = decryptDecodedText(decodedText);\n\n    if (\"error\" in result) {\n      console.error(\"Error from tsx:\", result.error);\n      qrCodeScannerRef.current?.pause();\n      setIsScanning(false);\n    } else if (result.message && result.Q2) {\n      console.log(result.message);\n      // HANDLE QRImages\n      decryptedQ2 = +result.Q2;\n      if (readerRef.current) {\n        const uri = await captureRef(readerRef, {\n          format: \"png\",\n          quality: 0.8,\n        });\n        setCapturedImages((prevImages) => [...prevImages, uri]);\n        setCountOfQrViews(decryptedQ2);\n      }\n    } else if (result.warning) {\n      setToggleMsg(\"QRコードはすでにスキャンされています。\");\n      if (timeoutRef.current) {\n        clearTimeout(timeoutRef.current);\n      }\n\n      timeoutRef.current = setTimeout(() => {\n        setToggleMsg(\"\");\n      }, 3000);\n    } else if (result.data) {\n      decryptedQ2 = +result.data.Q2;\n      decryptedQ3 = result.data.Q3;\n      decryptedQ4 = result.data.Q4;\n\n      if (decryptedQ4 && decryptedQ3) {\n        const Q4json = JSON.parse(decryptedQ4);\n        const Q3json = JSON.parse(decryptedQ3);\n\n        // PARAMS\n        const lgapId = Q3json[\"h3\"];\n        const userRank = Q3json[\"h4\"];\n        const fullName = Q4json[\"1\"][\"2\"];\n        const fullNameKana = Q4json[\"1\"][\"3\"];\n        const dateOfBirth = Q4json[\"1\"][\"4\"];\n        const postalCode = Q4json[\"1\"][\"9\"];\n        const address = Q4json[\"1\"][\"7\"];\n\n        const [lastName, firstName]: [string, string] = fullName.split(\" \");\n        const [lastNameKana, firstNameKana]: [string, string] =\n          fullNameKana.split(\" \");\n\n        // SET Gender Code\n        let genderCode;\n        if (Q4json[\"1\"].hasOwnProperty(\"6\")) {\n          if (Q4json[\"1\"][\"6\"] === \"1\") {\n            genderCode = \"0\";\n          } else {\n            genderCode = Q4json[\"1\"][\"5\"];\n          }\n        } else if (Q4json[\"1\"][\"5\"] == null) {\n          genderCode = \"1\";\n        } else {\n          genderCode = Q4json[\"1\"][\"5\"];\n        }\n\n        // CHANGE Date Format\n        const year: string = dateOfBirth.substring(0, 4);\n        const month: string = dateOfBirth.substring(4, 6);\n        const day: string = dateOfBirth.substring(6, 8);\n        const formattedDate: string = `${year}-${month}-${day}`;\n\n        // CHANGE Postal Code Format\n        const firstPart: string = postalCode.substring(0, 3);\n        const secondPart: string = postalCode.substring(3, 7);\n        const formattedPostalCode: string = `${firstPart}-${secondPart}`;\n\n        try {\n          if (decryptedQ2 && Q4json) {\n            if (qrCodeScannerRef.current) {\n              await qrCodeScannerRef.current?.clear();\n            }\n\n            if (!Q4json[\"1\"].hasOwnProperty(\"10\")) {\n              const checkInConfirmationParams = new CheckInConfirmationParams();\n              checkInConfirmationParams.user = selfqrScannerParams.user;\n              checkInConfirmationParams.eventId = selfqrScannerParams.eventId;\n              checkInConfirmationParams.venueId = selfqrScannerParams.venueId;\n              checkInConfirmationParams.isScanner = true;\n\n              checkInConfirmationParams.entrantRecord.originalEntrant.lgapId =\n                lgapId;\n              checkInConfirmationParams.entrantRecord.originalEntrant.userRank =\n                userRank;\n              checkInConfirmationParams.entrantRecord.originalEntrant.firstName =\n                firstName;\n              checkInConfirmationParams.entrantRecord.originalEntrant.lastName =\n                lastName;\n              checkInConfirmationParams.entrantRecord.originalEntrant.firstNameKana =\n                firstNameKana;\n              checkInConfirmationParams.entrantRecord.originalEntrant.lastNameKana =\n                lastNameKana;\n              checkInConfirmationParams.entrantRecord.originalEntrant.dateOfBirth =\n                new Date(formattedDate);\n              checkInConfirmationParams.entrantRecord.originalEntrant.postalCode =\n                formattedPostalCode;\n              checkInConfirmationParams.entrantRecord.originalEntrant.genderCode =\n                genderCode;\n              checkInConfirmationParams.entrantRecord.originalEntrant.address =\n                address;\n              checkInConfirmationParams.entrantRecord.originalEntrant.familyOrderNumber = 0;\n              checkInConfirmationParams.entrantRecord.originalEntrant.receptionTypeCode =\n                selfqrScannerParams.receptionTypeCode;\n              checkInConfirmationParams.entrantRecord.modifiedEntrant =\n                checkInConfirmationParams.entrantRecord.originalEntrant;\n\n              navigation.navigate(\"CheckInConfirmation\", {\n                checkInConfirmationParams,\n              });\n              ActivityLogger.insertInfoLogEntry(selfqrScannerParams.user, 'SelfqrScanner', 'qrCodeSuccessCallback', 'transition', 'CheckInConfirmation', checkInConfirmationParams);\n            } else {\n              if (qrCodeScannerRef.current) {\n                await qrCodeScannerRef.current?.clear();\n              }\n              // HANDLE QRimages\n              if (readerRef.current) {\n                const uri = await captureRef(readerRef, {\n                  format: \"png\",\n                  quality: 0.8,\n                });\n                setCapturedImages((prevImages) => [...prevImages, uri]);\n              }\n\n              const groupCheckInConfirmationParams =\n                new GroupCheckInConfirmationParams();\n              groupCheckInConfirmationParams.user = selfqrScannerParams.user;\n              groupCheckInConfirmationParams.eventId =\n                selfqrScannerParams.eventId;\n              groupCheckInConfirmationParams.venueId =\n                selfqrScannerParams.venueId;\n              groupCheckInConfirmationParams.isScanner = true;\n              groupCheckInConfirmationParams.selectedEntrantIndex = 1;\n\n              const entrantRecordList =\n                groupCheckInConfirmationParams.entrantRecordList;\n\n              // Main Person\n              const entrant = new EntrantRecord();\n              entrant.originalEntrant.lgapId = lgapId;\n              entrant.originalEntrant.userRank = userRank;\n              entrant.originalEntrant.firstName = firstName;\n              entrant.originalEntrant.lastName = lastName;\n              entrant.originalEntrant.firstNameKana = firstNameKana;\n              entrant.originalEntrant.lastNameKana = lastNameKana;\n              entrant.originalEntrant.dateOfBirth = new Date(formattedDate);\n              entrant.originalEntrant.postalCode = formattedPostalCode;\n              entrant.originalEntrant.genderCode = genderCode;\n              entrant.originalEntrant.address = address;\n              entrant.originalEntrant.familyOrderNumber = 0;\n              entrant.originalEntrant.receptionTypeCode =\n                selfqrScannerParams.receptionTypeCode;\n              entrant.modifiedEntrant = entrant.originalEntrant;\n              entrantRecordList.addEntrantRecord(entrant);\n\n              // Other Entrants\n              await Promise.all(\n                Object.values(Q4json[\"1\"][\"10\"]).map(\n                  async (personData: any, index: number) => {\n                    const [lastName, firstName]: [string, string] =\n                      personData[\"10-5\"].split(\" \");\n                    const [lastNameKana, firstNameKana]: [string, string] =\n                      personData[\"10-6\"].split(\" \");\n                    const birthDate = personData[\"10-7\"];\n\n                    // CHANGE Date Format\n                    const year: string = birthDate.substring(0, 4);\n                    const month: string = birthDate.substring(4, 6);\n                    const day: string = birthDate.substring(6, 8);\n                    const formattedDateOfBirth: string = `${year}-${month}-${day}`;\n\n                    // SET Gender Code\n                    let genderCode;\n                    if (personData[\"10-9\"] === \"1\") {\n                      genderCode = \"0\";\n                    } else {\n                      genderCode = personData[\"10-8\"];\n                    }\n\n                    // SET & CHANGE Postal Code Format\n                    let postalCode;\n                    if (personData[\"10-10\"] === 1) {\n                      postalCode = Q4json[\"1\"][\"9\"];\n                    } else {\n                      postalCode = personData[\"10-11\"];\n                    }\n\n                    const firstPart: string = postalCode.substring(0, 3);\n                    const secondPart: string = postalCode.substring(3, 7);\n                    const formattedPostalCode: string = `${firstPart}-${secondPart}`;\n\n                    // SET Address\n                    let address;\n                    if (personData[\"10-10\"] === 1) {\n                      address = Q4json[\"1\"][\"7\"];\n                    } else {\n                      address = personData[\"10-12\"];\n                    }\n\n                    // SET Relationship\n                    let relationship;\n                    const relationResult = await getRelationshipInfo(\n                      personData[\"10-3\"]\n                    );\n                    if (relationResult) {\n                      if (relationResult.data[0].is_manual_entry == true) {\n                        relationship = personData[\"10-4\"];\n                      } else {\n                        relationship = relationResult.data[0].name;\n                      }\n                    } else {\n                      relationship = \"\";\n                    }\n\n                    const entrant = new EntrantRecord();\n                    entrant.originalEntrant.relationship = relationship;\n                    entrant.originalEntrant.firstName = firstName;\n                    entrant.originalEntrant.lastName = lastName;\n                    entrant.originalEntrant.firstNameKana = firstNameKana;\n                    entrant.originalEntrant.lastNameKana = lastNameKana;\n                    entrant.originalEntrant.dateOfBirth = new Date(\n                      formattedDateOfBirth\n                    );\n                    entrant.originalEntrant.postalCode = formattedPostalCode;\n                    entrant.originalEntrant.genderCode = genderCode;\n                    entrant.originalEntrant.address = address;\n                    entrant.originalEntrant.familyOrderNumber = parseInt(\n                      personData[\"10-2\"]\n                    );\n                    entrant.originalEntrant.receptionTypeCode =\n                      selfqrScannerParams.receptionTypeCode;\n                    entrant.modifiedEntrant = entrant.originalEntrant;\n                    entrantRecordList.addEntrantRecord(entrant);\n                  }\n                )\n              );\n\n              navigation.navigate(\"GroupCheckInConfirmation\", {\n                groupCheckInConfirmationParams,\n              });\n              ActivityLogger.insertInfoLogEntry(selfqrScannerParams.user, 'SelfqrScanner', 'qrCodeSuccessCallback', 'transition', 'GroupCheckInConfirmation', groupCheckInConfirmationParams);\n            }\n          }\n        } catch (e) {\n          console.error(\"Failed to parse JSON:\", e);\n        }\n      } else {\n        console.error(\"decryptedQ4 is undefined\");\n      }\n    }\n  };\n\n  const qrCodeErrorCallback = (errorMessage: string) => {\n    const err = errorMessage;\n  };\n\n  // For iPad\n  const handleBarcodeScanned = ({ data }: { data: string }) => {\n    if (!scanned) {\n      setScanned(true);\n      Alert.alert(\n        \"QR Code Scanned\",\n        `Bar code with data ${data} has been scanned!`,\n        [\n          {\n            text: \"OK\",\n            onPress: () => {\n              setScanned(false);\n            },\n          },\n        ],\n        { cancelable: false }\n      );\n    }\n  };\n\n  if (hasPermission === null) {\n    return <Text>Requesting camera permission...</Text>;\n  }\n  if (hasPermission === false) {\n    return <Text>No access to camera</Text>;\n  }\n\n  const handleReturnButton = () => {\n    navigation.navigate(\"SelfqrDescription\", {\n      selfqrDescriptionParams: selfqrScannerParams,\n    });\n    ActivityLogger.insertInfoLogEntry(selfqrScannerParams.user, 'SelfqrScanner', 'handleReturnButton', 'transition', 'SelfqrDescription', selfqrScannerParams);\n  };\n\n  const handleSelectReceptionMethod = () => {\n    const selectReceptionMethodParams = new SelectReceptionMethodParams();\n    selectReceptionMethodParams.eventId = selfqrScannerParams.eventId;\n    selectReceptionMethodParams.venueId = selfqrScannerParams.venueId;\n    selectReceptionMethodParams.user = selfqrScannerParams.user;\n    selectReceptionMethodParams.receptionTypeCode =\n      selfqrScannerParams.receptionTypeCode;\n    navigation.navigate(\"SelectReceptionMethod\", {\n      selectReceptionMethodParams,\n    });\n    ActivityLogger.insertInfoLogEntry(selfqrScannerParams.user, 'SelfqrScanner', 'handleSelectReceptionMethod', 'transition', 'SelectReceptionMethod', selectReceptionMethodParams);\n  };\n\n  return (\n    <SafeAreaView style={styles.mainContainer}>\n      <StatusBar barStyle=\"dark-content\" />\n      <Header\n        titleName=\"自己QRをかざしてください\"\n        buttonName=\"受付をやめる\"\n        onPress={handleSelectReceptionMethod}\n      />\n      <View style={styles.container}>\n        <View style={styles.leftSide}>\n          <Image\n            source={require(\"../../assets/images/qrScanner.png\")}\n            style={styles.image}\n          />\n        </View>\n        {hasPermission &&\n          (Platform.OS === \"ios\" ? (\n            <View style={styles.rightSide}>\n              <View style={styles.messageContainer}>\n                {isScanning && (\n                  <Image\n                    source={require(\"../../assets/images/qr_inprocess.png\")}\n                    style={styles.scanningMessage}\n                  />\n                )}\n\n                {isScanning === false && (\n                  <Image\n                    source={require(\"../../assets/images/qr_fail.png\")}\n                    style={styles.errorMessage}\n                  />\n                )}\n              </View>\n              <Camera\n                style={styles.camera}\n                type={\"back\" as any}\n                onBarCodeScanned={handleBarcodeScanned}\n              />\n              <View style={[styles.corner, styles.topLeftCorner]} />\n              <View style={[styles.corner, styles.topRightCorner]} />\n              <View style={[styles.corner, styles.bottomLeftCorner]} />\n              <View style={[styles.corner, styles.bottomRightCorner]} />\n            </View>\n          ) : (\n            <View style={styles.rightSide}>\n              <View style={styles.messageContainer}>\n                {isScanning && (\n                  <Image\n                    source={require(\"../../assets/images/qr_inprocess.png\")}\n                    style={styles.scanningMessage}\n                  />\n                )}\n\n                {isScanning === false && (\n                  <Image\n                    source={require(\"../../assets/images/qr_fail.png\")}\n                    style={styles.errorMessage}\n                  />\n                )}\n              </View>\n              <View ref={readerRef} style={styles.webCamContainer}>\n                <View id=\"reader\" style={styles.webCamera} />\n              </View>\n\n              <View style={[styles.corner, styles.topLeftCornerWeb]} />\n              <View style={[styles.corner, styles.topRightCornerWeb]} />\n              <View style={[styles.corner, styles.bottomLeftCornerWeb]} />\n              <View style={[styles.corner, styles.bottomRightCornerWeb]} />\n\n              {toggleMsg ? (\n                <View style={styles.toggleMsgContainer}>\n                  <HiraginoKakuText>{toggleMsg}</HiraginoKakuText>\n                </View>\n              ) : null}\n\n              <View style={styles.qrPhotoContainer}>\n                {capturedImages\n                  .slice(0, countOfQrViews || 0)\n                  .map((uri, index) => (\n                    <View key={index}>\n                      <Image source={{ uri }} style={styles.capturedImage} />\n                      <HiraginoKakuText normal style={styles.imageNumber}>\n                        {index + 1}\n                      </HiraginoKakuText>\n                    </View>\n                  ))}\n                {Array.from({\n                  length: (countOfQrViews || 0) - capturedImages.length,\n                }).map((_, index) => (\n                  <View key={index + capturedImages.length}>\n                    <View style={styles.plainView}></View>\n                    <HiraginoKakuText normal style={styles.imageNumber}>\n                      {index + capturedImages.length + 1}\n                    </HiraginoKakuText>\n                  </View>\n                ))}\n              </View>\n            </View>\n          ))}\n      </View>\n      <Footer\n        hasNextButton={false}\n        onPressPrevious={handleReturnButton}\n      ></Footer>\n    </SafeAreaView>\n  );\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}