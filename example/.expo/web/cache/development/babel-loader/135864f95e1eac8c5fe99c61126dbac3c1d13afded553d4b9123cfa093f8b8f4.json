{"ast":null,"code":"\"use strict\";\n\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _class;\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nimport { EventTypes } from \"../interfaces\";\nimport EventManager from \"./EventManager\";\nimport { PointerType } from \"../../PointerType\";\nvar KeyboardEventManager = function (_EventManager) {\n  _inherits(KeyboardEventManager, _EventManager);\n  var _super = _createSuper(KeyboardEventManager);\n  function KeyboardEventManager() {\n    var _this;\n    _classCallCheck(this, KeyboardEventManager);\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.isPressed = false;\n    _this.keyDownCallback = function (event) {\n      if (KeyboardEventManager.cancelationKeys.indexOf(event.key) !== -1 && _this.isPressed) {\n        _this.dispatchEvent(event, EventTypes.CANCEL);\n        return;\n      }\n      if (KeyboardEventManager.activationKeys.indexOf(event.key) === -1) {\n        return;\n      }\n      _this.dispatchEvent(event, EventTypes.DOWN);\n    };\n    _this.onKeyUp = function (event) {\n      if (KeyboardEventManager.activationKeys.indexOf(event.key) === -1 || !_this.isPressed) {\n        return;\n      }\n      _this.dispatchEvent(event, EventTypes.UP);\n    };\n    return _this;\n  }\n  _createClass(KeyboardEventManager, [{\n    key: \"dispatchEvent\",\n    value: function dispatchEvent(event, eventType) {\n      if (!(event.target instanceof HTMLElement)) {\n        return;\n      }\n      var adaptedEvent = this.mapEvent(event, eventType);\n      switch (eventType) {\n        case EventTypes.UP:\n          this.isPressed = false;\n          this.onPointerUp(adaptedEvent);\n          break;\n        case EventTypes.DOWN:\n          this.isPressed = true;\n          this.onPointerDown(adaptedEvent);\n          break;\n        case EventTypes.CANCEL:\n          this.isPressed = false;\n          this.onPointerCancel(adaptedEvent);\n          break;\n      }\n    }\n  }, {\n    key: \"registerListeners\",\n    value: function registerListeners() {\n      this.view.addEventListener('keydown', this.keyDownCallback);\n      KeyboardEventManager.instances.add(this);\n      if (!KeyboardEventManager.registeredStaticListeners) {\n        KeyboardEventManager.registeredStaticListeners = true;\n        document.addEventListener('keyup', KeyboardEventManager.keyUpStaticCallback, {\n          capture: true\n        });\n      }\n    }\n  }, {\n    key: \"unregisterListeners\",\n    value: function unregisterListeners() {\n      this.view.removeEventListener('keydown', this.keyDownCallback);\n      KeyboardEventManager.instances.delete(this);\n      if (KeyboardEventManager.instances.size === 0) {\n        document.removeEventListener('keyup', KeyboardEventManager.keyUpStaticCallback, {\n          capture: true\n        });\n        KeyboardEventManager.registeredStaticListeners = false;\n      }\n    }\n  }, {\n    key: \"mapEvent\",\n    value: function mapEvent(event, eventType) {\n      var viewRect = event.target.getBoundingClientRect();\n      var viewportPosition = {\n        x: (viewRect == null ? void 0 : viewRect.x) + (viewRect == null ? void 0 : viewRect.width) / 2,\n        y: (viewRect == null ? void 0 : viewRect.y) + (viewRect == null ? void 0 : viewRect.height) / 2\n      };\n      var relativePosition = {\n        x: (viewRect == null ? void 0 : viewRect.width) / 2,\n        y: (viewRect == null ? void 0 : viewRect.height) / 2\n      };\n      return {\n        x: viewportPosition.x,\n        y: viewportPosition.y,\n        offsetX: relativePosition.x,\n        offsetY: relativePosition.y,\n        pointerId: 0,\n        eventType: eventType,\n        pointerType: PointerType.KEY,\n        time: event.timeStamp\n      };\n    }\n  }]);\n  return KeyboardEventManager;\n}(EventManager);\n_class = KeyboardEventManager;\nKeyboardEventManager.activationKeys = ['Enter', ' '];\nKeyboardEventManager.cancelationKeys = ['Tab'];\nKeyboardEventManager.registeredStaticListeners = false;\nKeyboardEventManager.instances = new Set();\nKeyboardEventManager.keyUpStaticCallback = function (event) {\n  if (_class.activationKeys.indexOf(event.key) === -1) {\n    return;\n  }\n  _class.instances.forEach(function (item) {\n    item.onKeyUp(event);\n  });\n};\nexport { KeyboardEventManager as default };","map":{"version":3,"names":["EventTypes","EventManager","PointerType","KeyboardEventManager","_EventManager","_inherits","_super","_createSuper","_this","_classCallCheck","_len","arguments","length","args","Array","_key","call","apply","concat","isPressed","keyDownCallback","event","cancelationKeys","indexOf","key","dispatchEvent","CANCEL","activationKeys","DOWN","onKeyUp","UP","_createClass","value","eventType","target","HTMLElement","adaptedEvent","mapEvent","onPointerUp","onPointerDown","onPointerCancel","registerListeners","view","addEventListener","instances","add","registeredStaticListeners","document","keyUpStaticCallback","capture","unregisterListeners","removeEventListener","delete","size","viewRect","getBoundingClientRect","viewportPosition","x","width","y","height","relativePosition","offsetX","offsetY","pointerId","pointerType","KEY","time","timeStamp","_class","Set","forEach","item","default"],"sources":["/home/runner/work/DemoReception/DemoReception/example/node_modules/react-native-gesture-handler/src/web/tools/KeyboardEventManager.ts"],"sourcesContent":["import { AdaptedEvent, EventTypes } from '../interfaces';\nimport EventManager from './EventManager';\nimport { PointerType } from '../../PointerType';\n\nexport default class KeyboardEventManager extends EventManager<HTMLElement> {\n  private static activationKeys = ['Enter', ' '];\n  private static cancelationKeys = ['Tab'];\n  private isPressed = false;\n  private static registeredStaticListeners = false;\n  private static instances: Set<KeyboardEventManager> = new Set();\n\n  private static keyUpStaticCallback = (event: KeyboardEvent): void => {\n    // We need a global listener, as in some cases, keyUp event gets stop-propagated.\n    // Then, if we used only component-level listeners the gesture would never end,\n    // causing other gestues to fail.\n\n    if (this.activationKeys.indexOf(event.key) === -1) {\n      return;\n    }\n\n    this.instances.forEach((item) => {\n      item.onKeyUp(event);\n    });\n  };\n\n  private keyDownCallback = (event: KeyboardEvent): void => {\n    if (\n      KeyboardEventManager.cancelationKeys.indexOf(event.key) !== -1 &&\n      this.isPressed\n    ) {\n      this.dispatchEvent(event, EventTypes.CANCEL);\n      return;\n    }\n\n    if (KeyboardEventManager.activationKeys.indexOf(event.key) === -1) {\n      return;\n    }\n\n    this.dispatchEvent(event, EventTypes.DOWN);\n  };\n\n  private onKeyUp = (event: KeyboardEvent): void => {\n    if (\n      KeyboardEventManager.activationKeys.indexOf(event.key) === -1 ||\n      !this.isPressed\n    ) {\n      return;\n    }\n\n    this.dispatchEvent(event, EventTypes.UP);\n  };\n\n  private dispatchEvent(event: KeyboardEvent, eventType: EventTypes) {\n    if (!(event.target instanceof HTMLElement)) {\n      return;\n    }\n\n    const adaptedEvent = this.mapEvent(event, eventType);\n\n    switch (eventType) {\n      case EventTypes.UP:\n        this.isPressed = false;\n        this.onPointerUp(adaptedEvent);\n        break;\n      case EventTypes.DOWN:\n        this.isPressed = true;\n        this.onPointerDown(adaptedEvent);\n        break;\n      case EventTypes.CANCEL:\n        this.isPressed = false;\n        this.onPointerCancel(adaptedEvent);\n        break;\n    }\n  }\n\n  public registerListeners(): void {\n    this.view.addEventListener('keydown', this.keyDownCallback);\n\n    KeyboardEventManager.instances.add(this);\n\n    if (!KeyboardEventManager.registeredStaticListeners) {\n      KeyboardEventManager.registeredStaticListeners = true;\n      document.addEventListener(\n        'keyup',\n        KeyboardEventManager.keyUpStaticCallback,\n        { capture: true }\n      );\n    }\n  }\n\n  public unregisterListeners(): void {\n    this.view.removeEventListener('keydown', this.keyDownCallback);\n\n    KeyboardEventManager.instances.delete(this);\n\n    if (KeyboardEventManager.instances.size === 0) {\n      document.removeEventListener(\n        'keyup',\n        KeyboardEventManager.keyUpStaticCallback,\n        { capture: true }\n      );\n      KeyboardEventManager.registeredStaticListeners = false;\n    }\n  }\n\n  protected mapEvent(\n    event: KeyboardEvent,\n    eventType: EventTypes\n  ): AdaptedEvent {\n    const viewRect = (event.target as HTMLElement).getBoundingClientRect();\n\n    const viewportPosition = {\n      x: viewRect?.x + viewRect?.width / 2,\n      y: viewRect?.y + viewRect?.height / 2,\n    };\n\n    const relativePosition = {\n      x: viewRect?.width / 2,\n      y: viewRect?.height / 2,\n    };\n\n    return {\n      x: viewportPosition.x,\n      y: viewportPosition.y,\n      offsetX: relativePosition.x,\n      offsetY: relativePosition.y,\n      pointerId: 0,\n      eventType: eventType,\n      pointerType: PointerType.KEY,\n      time: event.timeStamp,\n    };\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}