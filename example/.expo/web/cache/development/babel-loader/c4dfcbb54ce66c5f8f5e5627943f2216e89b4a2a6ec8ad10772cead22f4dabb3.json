{"ast":null,"code":"'use strict';\n\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { isWorkletFunction } from \"./commonTypes.js\";\nimport { ReanimatedError, registerWorkletStackDetails } from \"./errors.js\";\nimport { logger } from \"./logger/index.js\";\nimport { jsVersion } from \"./platform-specific/jsVersion.js\";\nimport { shouldBeUseWeb } from \"./PlatformChecker.js\";\nimport { shareableMappingCache, shareableMappingFlag } from \"./shareableMappingCache.js\";\nimport { WorkletsModule } from \"./worklets/index.js\";\nvar SHOULD_BE_USE_WEB = shouldBeUseWeb();\nvar MAGIC_KEY = 'REANIMATED_MAGIC_KEY';\nfunction isHostObject(value) {\n  'worklet';\n  return MAGIC_KEY in value;\n}\nfunction isPlainJSObject(object) {\n  return Object.getPrototypeOf(object) === Object.prototype;\n}\nfunction getFromCache(value) {\n  var cached = shareableMappingCache.get(value);\n  if (cached === shareableMappingFlag) {\n    return value;\n  }\n  return cached;\n}\nvar INACCESSIBLE_OBJECT = {\n  __init: function __init() {\n    'worklet';\n\n    return new Proxy({}, {\n      get: function get(_, prop) {\n        if (prop === '_isReanimatedSharedValue' || prop === '__remoteFunction') {\n          return false;\n        }\n        throw new ReanimatedError(`Trying to access property \\`${String(prop)}\\` of an object which cannot be sent to the UI runtime.`);\n      },\n      set: function set() {\n        throw new ReanimatedError('Trying to write to an object which cannot be sent to the UI runtime.');\n      }\n    });\n  }\n};\nvar VALID_ARRAY_VIEWS_NAMES = ['Int8Array', 'Uint8Array', 'Uint8ClampedArray', 'Int16Array', 'Uint16Array', 'Int32Array', 'Uint32Array', 'Float32Array', 'Float64Array', 'BigInt64Array', 'BigUint64Array', 'DataView'];\nvar DETECT_CYCLIC_OBJECT_DEPTH_THRESHOLD = 30;\nvar processedObjectAtThresholdDepth;\nfunction makeShareableCloneRecursiveWeb(value) {\n  return value;\n}\nfunction makeShareableCloneRecursiveNative(value) {\n  var shouldPersistRemote = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  var depth = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n  detectCyclicObject(value, depth);\n  var isObject = typeof value === 'object';\n  var isFunction = typeof value === 'function';\n  if (!isObject && !isFunction || value === null) {\n    return clonePrimitive(value, shouldPersistRemote);\n  }\n  var cached = getFromCache(value);\n  if (cached !== undefined) {\n    return cached;\n  }\n  if (Array.isArray(value)) {\n    return cloneArray(value, shouldPersistRemote, depth);\n  }\n  if (isFunction && !isWorkletFunction(value)) {\n    return cloneRemoteFunction(value, shouldPersistRemote);\n  }\n  if (isHostObject(value)) {\n    return cloneHostObject(value, shouldPersistRemote);\n  }\n  if (isPlainJSObject(value) && value.__workletContextObjectFactory) {\n    return cloneContextObject(value);\n  }\n  if ((isPlainJSObject(value) || isFunction) && isWorkletFunction(value)) {\n    return cloneWorklet(value, shouldPersistRemote, depth);\n  }\n  if (isPlainJSObject(value) || isFunction) {\n    return clonePlainJSObject(value, shouldPersistRemote, depth);\n  }\n  if (value instanceof RegExp) {\n    return cloneRegExp(value);\n  }\n  if (value instanceof Error) {\n    return cloneError(value);\n  }\n  if (value instanceof ArrayBuffer) {\n    return cloneArrayBuffer(value, shouldPersistRemote);\n  }\n  if (ArrayBuffer.isView(value)) {\n    return cloneArrayBufferView(value);\n  }\n  return inaccessibleObject(value);\n}\nexport var makeShareableCloneRecursive = SHOULD_BE_USE_WEB ? makeShareableCloneRecursiveWeb : makeShareableCloneRecursiveNative;\nfunction detectCyclicObject(value, depth) {\n  if (depth >= DETECT_CYCLIC_OBJECT_DEPTH_THRESHOLD) {\n    if (depth === DETECT_CYCLIC_OBJECT_DEPTH_THRESHOLD) {\n      processedObjectAtThresholdDepth = value;\n    } else if (value === processedObjectAtThresholdDepth) {\n      throw new ReanimatedError('Trying to convert a cyclic object to a shareable. This is not supported.');\n    }\n  } else {\n    processedObjectAtThresholdDepth = undefined;\n  }\n}\nfunction clonePrimitive(value, shouldPersistRemote) {\n  return WorkletsModule.makeShareableClone(value, shouldPersistRemote);\n}\nfunction cloneArray(value, shouldPersistRemote, depth) {\n  var clonedElements = value.map(function (element) {\n    return makeShareableCloneRecursive(element, shouldPersistRemote, depth + 1);\n  });\n  var clone = WorkletsModule.makeShareableClone(clonedElements, shouldPersistRemote, value);\n  shareableMappingCache.set(value, clone);\n  shareableMappingCache.set(clone);\n  freezeObjectInDev(value);\n  return clone;\n}\nfunction cloneRemoteFunction(value, shouldPersistRemote) {\n  var clone = WorkletsModule.makeShareableClone(value, shouldPersistRemote, value);\n  shareableMappingCache.set(value, clone);\n  shareableMappingCache.set(clone);\n  freezeObjectInDev(value);\n  return clone;\n}\nfunction cloneHostObject(value, shouldPersistRemote) {\n  var clone = WorkletsModule.makeShareableClone(value, shouldPersistRemote, value);\n  shareableMappingCache.set(value, clone);\n  shareableMappingCache.set(clone);\n  return clone;\n}\nfunction cloneWorklet(value, shouldPersistRemote, depth) {\n  if (__DEV__) {\n    var babelVersion = value.__initData.version;\n    if (babelVersion !== undefined && babelVersion !== jsVersion) {\n      throw new ReanimatedError(`[Reanimated] Mismatch between JavaScript code version and Reanimated Babel plugin version (${jsVersion} vs. ${babelVersion}).        \nSee \\`https://docs.swmansion.com/react-native-reanimated/docs/guides/troubleshooting#mismatch-between-javascript-code-version-and-reanimated-babel-plugin-version\\` for more details.\nOffending code was: \\`${getWorkletCode(value)}\\``);\n    }\n    registerWorkletStackDetails(value.__workletHash, value.__stackDetails);\n  }\n  if (value.__stackDetails) {\n    delete value.__stackDetails;\n  }\n  var clonedProps = {};\n  clonedProps.__initData = makeShareableCloneRecursive(value.__initData, true, depth + 1);\n  for (var _ref of Object.entries(value)) {\n    var _ref2 = _slicedToArray(_ref, 2);\n    var key = _ref2[0];\n    var element = _ref2[1];\n    if (key === '__initData' && clonedProps.__initData !== undefined) {\n      continue;\n    }\n    clonedProps[key] = makeShareableCloneRecursive(element, shouldPersistRemote, depth + 1);\n  }\n  var clone = WorkletsModule.makeShareableClone(clonedProps, true, value);\n  shareableMappingCache.set(value, clone);\n  shareableMappingCache.set(clone);\n  freezeObjectInDev(value);\n  return clone;\n}\nfunction cloneContextObject(value) {\n  var workletContextObjectFactory = value.__workletContextObjectFactory;\n  var handle = makeShareableCloneRecursive({\n    __init: function __init() {\n      'worklet';\n\n      return workletContextObjectFactory();\n    }\n  });\n  shareableMappingCache.set(value, handle);\n  return handle;\n}\nfunction clonePlainJSObject(value, shouldPersistRemote, depth) {\n  var clonedProps = {};\n  for (var _ref3 of Object.entries(value)) {\n    var _ref4 = _slicedToArray(_ref3, 2);\n    var key = _ref4[0];\n    var element = _ref4[1];\n    if (key === '__initData' && clonedProps.__initData !== undefined) {\n      continue;\n    }\n    clonedProps[key] = makeShareableCloneRecursive(element, shouldPersistRemote, depth + 1);\n  }\n  var clone = WorkletsModule.makeShareableClone(clonedProps, shouldPersistRemote, value);\n  shareableMappingCache.set(value, clone);\n  shareableMappingCache.set(clone);\n  freezeObjectInDev(value);\n  return clone;\n}\nfunction cloneRegExp(value) {\n  var pattern = value.source;\n  var flags = value.flags;\n  var handle = makeShareableCloneRecursive({\n    __init: function __init() {\n      'worklet';\n\n      return new RegExp(pattern, flags);\n    }\n  });\n  shareableMappingCache.set(value, handle);\n  return handle;\n}\nfunction cloneError(value) {\n  var name = value.name,\n    message = value.message,\n    stack = value.stack;\n  var handle = makeShareableCloneRecursive({\n    __init: function __init() {\n      'worklet';\n      var error = new Error();\n      error.name = name;\n      error.message = message;\n      error.stack = stack;\n      return error;\n    }\n  });\n  shareableMappingCache.set(value, handle);\n  return handle;\n}\nfunction cloneArrayBuffer(value, shouldPersistRemote) {\n  var clone = WorkletsModule.makeShareableClone(value, shouldPersistRemote, value);\n  shareableMappingCache.set(value, clone);\n  shareableMappingCache.set(clone);\n  return clone;\n}\nfunction cloneArrayBufferView(value) {\n  var buffer = value.buffer;\n  var typeName = value.constructor.name;\n  var handle = makeShareableCloneRecursive({\n    __init: function __init() {\n      'worklet';\n\n      if (!VALID_ARRAY_VIEWS_NAMES.includes(typeName)) {\n        throw new ReanimatedError(`[Reanimated] Invalid array view name \\`${typeName}\\`.`);\n      }\n      var constructor = global[typeName];\n      if (constructor === undefined) {\n        throw new ReanimatedError(`[Reanimated] Constructor for \\`${typeName}\\` not found.`);\n      }\n      return new constructor(buffer);\n    }\n  });\n  shareableMappingCache.set(value, handle);\n  return handle;\n}\nfunction inaccessibleObject(value) {\n  var clone = makeShareableCloneRecursive(INACCESSIBLE_OBJECT);\n  shareableMappingCache.set(value, clone);\n  return clone;\n}\nvar WORKLET_CODE_THRESHOLD = 255;\nfunction getWorkletCode(value) {\n  var _value$__initData;\n  var code = value == null ? void 0 : (_value$__initData = value.__initData) == null ? void 0 : _value$__initData.code;\n  if (!code) {\n    return 'unknown';\n  }\n  if (code.length > WORKLET_CODE_THRESHOLD) {\n    return `${code.substring(0, WORKLET_CODE_THRESHOLD)}...`;\n  }\n  return code;\n}\nfunction isRemoteFunction(value) {\n  'worklet';\n\n  return !!value.__remoteFunction;\n}\nfunction freezeObjectInDev(value) {\n  if (!__DEV__) {\n    return;\n  }\n  Object.entries(value).forEach(function (_ref5) {\n    var _ref6 = _slicedToArray(_ref5, 2),\n      key = _ref6[0],\n      element = _ref6[1];\n    var descriptor = Object.getOwnPropertyDescriptor(value, key);\n    if (!descriptor.configurable) {\n      return;\n    }\n    Object.defineProperty(value, key, {\n      get: function get() {\n        return element;\n      },\n      set: function set() {\n        logger.warn(`Tried to modify key \\`${key}\\` of an object which has been already passed to a worklet. See \nhttps://docs.swmansion.com/react-native-reanimated/docs/guides/troubleshooting#tried-to-modify-key-of-an-object-which-has-been-converted-to-a-shareable \nfor more details.`);\n      }\n    });\n  });\n  Object.preventExtensions(value);\n}\nexport function makeShareableCloneOnUIRecursive(value) {\n  'worklet';\n\n  if (SHOULD_BE_USE_WEB) {\n    return value;\n  }\n  function cloneRecursive(value) {\n    if (typeof value === 'object' && value !== null || typeof value === 'function') {\n      if (isHostObject(value)) {\n        return global._makeShareableClone(value, undefined);\n      }\n      if (isRemoteFunction(value)) {\n        return value.__remoteFunction;\n      }\n      if (Array.isArray(value)) {\n        return global._makeShareableClone(value.map(cloneRecursive), undefined);\n      }\n      var toAdapt = {};\n      for (var _ref7 of Object.entries(value)) {\n        var _ref8 = _slicedToArray(_ref7, 2);\n        var key = _ref8[0];\n        var element = _ref8[1];\n        toAdapt[key] = cloneRecursive(element);\n      }\n      return global._makeShareableClone(toAdapt, value);\n    }\n    return global._makeShareableClone(value, undefined);\n  }\n  return cloneRecursive(value);\n}\nfunction makeShareableJS(value) {\n  return value;\n}\nfunction makeShareableNative(value) {\n  if (shareableMappingCache.get(value)) {\n    return value;\n  }\n  var handle = makeShareableCloneRecursive({\n    __init: function __init() {\n      'worklet';\n\n      return value;\n    }\n  });\n  shareableMappingCache.set(value, handle);\n  return value;\n}\nexport var makeShareable = SHOULD_BE_USE_WEB ? makeShareableJS : makeShareableNative;","map":{"version":3,"names":["_slicedToArray","isWorkletFunction","ReanimatedError","registerWorkletStackDetails","logger","jsVersion","shouldBeUseWeb","shareableMappingCache","shareableMappingFlag","WorkletsModule","SHOULD_BE_USE_WEB","MAGIC_KEY","isHostObject","value","isPlainJSObject","object","Object","getPrototypeOf","prototype","getFromCache","cached","get","INACCESSIBLE_OBJECT","__init","Proxy","_","prop","String","set","VALID_ARRAY_VIEWS_NAMES","DETECT_CYCLIC_OBJECT_DEPTH_THRESHOLD","processedObjectAtThresholdDepth","makeShareableCloneRecursiveWeb","makeShareableCloneRecursiveNative","shouldPersistRemote","arguments","length","undefined","depth","detectCyclicObject","isObject","isFunction","clonePrimitive","Array","isArray","cloneArray","cloneRemoteFunction","cloneHostObject","__workletContextObjectFactory","cloneContextObject","cloneWorklet","clonePlainJSObject","RegExp","cloneRegExp","Error","cloneError","ArrayBuffer","cloneArrayBuffer","isView","cloneArrayBufferView","inaccessibleObject","makeShareableCloneRecursive","makeShareableClone","clonedElements","map","element","clone","freezeObjectInDev","__DEV__","babelVersion","__initData","version","getWorkletCode","__workletHash","__stackDetails","clonedProps","_ref","entries","_ref2","key","workletContextObjectFactory","handle","_ref3","_ref4","pattern","source","flags","name","message","stack","error","buffer","typeName","constructor","includes","global","WORKLET_CODE_THRESHOLD","_value$__initData","code","substring","isRemoteFunction","__remoteFunction","forEach","_ref5","_ref6","descriptor","getOwnPropertyDescriptor","configurable","defineProperty","warn","preventExtensions","makeShareableCloneOnUIRecursive","cloneRecursive","_makeShareableClone","toAdapt","_ref7","_ref8","makeShareableJS","makeShareableNative","makeShareable"],"sources":["/home/runner/work/DemoReception/DemoReception/example/node_modules/react-native-reanimated/src/shareables.ts"],"sourcesContent":["'use strict';\nimport type {\n  FlatShareableRef,\n  ShareableRef,\n  WorkletFunction,\n  WorkletFunctionDev,\n} from './commonTypes';\nimport { isWorkletFunction } from './commonTypes';\nimport { ReanimatedError, registerWorkletStackDetails } from './errors';\nimport { logger } from './logger';\nimport { jsVersion } from './platform-specific/jsVersion';\nimport { shouldBeUseWeb } from './PlatformChecker';\nimport {\n  shareableMappingCache,\n  shareableMappingFlag,\n} from './shareableMappingCache';\nimport { WorkletsModule } from './worklets';\n\n// for web/chrome debugger/jest environments this file provides a stub implementation\n// where no shareable references are used. Instead, the objects themselves are used\n// instead of shareable references, because of the fact that we don't have to deal with\n// running the code on separate VMs.\nconst SHOULD_BE_USE_WEB = shouldBeUseWeb();\n\nconst MAGIC_KEY = 'REANIMATED_MAGIC_KEY';\n\nfunction isHostObject(value: NonNullable<object>) {\n  'worklet';\n  // We could use JSI to determine whether an object is a host object, however\n  // the below workaround works well and is way faster than an additional JSI call.\n  // We use the fact that host objects have broken implementation of `hasOwnProperty`\n  // and hence return true for all `in` checks regardless of the key we ask for.\n  return MAGIC_KEY in value;\n}\n\nfunction isPlainJSObject(object: object): object is Record<string, unknown> {\n  return Object.getPrototypeOf(object) === Object.prototype;\n}\n\nfunction getFromCache(value: object) {\n  const cached = shareableMappingCache.get(value);\n  if (cached === shareableMappingFlag) {\n    // This means that `value` was already a clone and we should return it as is.\n    return value;\n  }\n  return cached;\n}\n\n// The below object is used as a replacement for objects that cannot be transferred\n// as shareable values. In makeShareableCloneRecursive we detect if an object is of\n// a plain Object.prototype and only allow such objects to be transferred. This lets\n// us avoid all sorts of react internals from leaking into the UI runtime. To make it\n// possible to catch errors when someone actually tries to access such object on the UI\n// runtime, we use the below Proxy object which is instantiated on the UI runtime and\n// throws whenever someone tries to access its fields.\nconst INACCESSIBLE_OBJECT = {\n  __init: () => {\n    'worklet';\n    return new Proxy(\n      {},\n      {\n        get: (_: unknown, prop: string | symbol) => {\n          if (\n            prop === '_isReanimatedSharedValue' ||\n            prop === '__remoteFunction'\n          ) {\n            // not very happy about this check here, but we need to allow for\n            // \"inaccessible\" objects to be tested with isSharedValue check\n            // as it is being used in the mappers when extracting inputs recursively\n            // as well as with isRemoteFunction when cloning objects recursively.\n            // Apparently we can't check if a key exists there as HostObjects always\n            // return true for such tests, so the only possibility for us is to\n            // actually access that key and see if it is set to true. We therefore\n            // need to allow for this key to be accessed here.\n            return false;\n          }\n          throw new ReanimatedError(\n            `Trying to access property \\`${String(\n              prop\n            )}\\` of an object which cannot be sent to the UI runtime.`\n          );\n        },\n        set: () => {\n          throw new ReanimatedError(\n            'Trying to write to an object which cannot be sent to the UI runtime.'\n          );\n        },\n      }\n    );\n  },\n};\n\nconst VALID_ARRAY_VIEWS_NAMES = [\n  'Int8Array',\n  'Uint8Array',\n  'Uint8ClampedArray',\n  'Int16Array',\n  'Uint16Array',\n  'Int32Array',\n  'Uint32Array',\n  'Float32Array',\n  'Float64Array',\n  'BigInt64Array',\n  'BigUint64Array',\n  'DataView',\n];\n\nconst DETECT_CYCLIC_OBJECT_DEPTH_THRESHOLD = 30;\n// Below variable stores object that we process in makeShareableCloneRecursive at the specified depth.\n// We use it to check if later on the function reenters with the same object\nlet processedObjectAtThresholdDepth: unknown;\n\nfunction makeShareableCloneRecursiveWeb<T>(value: T): ShareableRef<T> {\n  return value as ShareableRef<T>;\n}\n\nfunction makeShareableCloneRecursiveNative<T>(\n  value: T,\n  shouldPersistRemote = false,\n  depth = 0\n): ShareableRef<T> {\n  detectCyclicObject(value, depth);\n\n  const isObject = typeof value === 'object';\n  const isFunction = typeof value === 'function';\n\n  if ((!isObject && !isFunction) || value === null) {\n    return clonePrimitive(value, shouldPersistRemote);\n  }\n\n  const cached = getFromCache(value);\n  if (cached !== undefined) {\n    return cached as ShareableRef<T>;\n  }\n\n  if (Array.isArray(value)) {\n    return cloneArray(value, shouldPersistRemote, depth);\n  }\n  if (isFunction && !isWorkletFunction(value)) {\n    return cloneRemoteFunction(value, shouldPersistRemote);\n  }\n  if (isHostObject(value)) {\n    return cloneHostObject(value, shouldPersistRemote);\n  }\n  if (isPlainJSObject(value) && value.__workletContextObjectFactory) {\n    return cloneContextObject(value);\n  }\n  if ((isPlainJSObject(value) || isFunction) && isWorkletFunction(value)) {\n    return cloneWorklet(value, shouldPersistRemote, depth);\n  }\n  if (isPlainJSObject(value) || isFunction) {\n    return clonePlainJSObject(value, shouldPersistRemote, depth);\n  }\n  if (value instanceof RegExp) {\n    return cloneRegExp(value);\n  }\n  if (value instanceof Error) {\n    return cloneError(value);\n  }\n  if (value instanceof ArrayBuffer) {\n    return cloneArrayBuffer(value, shouldPersistRemote);\n  }\n  if (ArrayBuffer.isView(value)) {\n    // typed array (e.g. Int32Array, Uint8ClampedArray) or DataView\n    return cloneArrayBufferView(value);\n  }\n  return inaccessibleObject(value);\n}\n\ninterface MakeShareableClone {\n  <T>(value: T, shouldPersistRemote?: boolean, depth?: number): ShareableRef<T>;\n}\n\nexport const makeShareableCloneRecursive: MakeShareableClone = SHOULD_BE_USE_WEB\n  ? makeShareableCloneRecursiveWeb\n  : makeShareableCloneRecursiveNative;\n\nfunction detectCyclicObject(value: unknown, depth: number) {\n  if (depth >= DETECT_CYCLIC_OBJECT_DEPTH_THRESHOLD) {\n    // if we reach certain recursion depth we suspect that we are dealing with a cyclic object.\n    // this type of objects are not supported and cannot be transferred as shareable, so we\n    // implement a simple detection mechanism that remembers the value at a given depth and\n    // tests whether we try reenter this method later on with the same value. If that happens\n    // we throw an appropriate error.\n    if (depth === DETECT_CYCLIC_OBJECT_DEPTH_THRESHOLD) {\n      processedObjectAtThresholdDepth = value;\n    } else if (value === processedObjectAtThresholdDepth) {\n      throw new ReanimatedError(\n        'Trying to convert a cyclic object to a shareable. This is not supported.'\n      );\n    }\n  } else {\n    processedObjectAtThresholdDepth = undefined;\n  }\n}\n\nfunction clonePrimitive<T>(\n  value: T,\n  shouldPersistRemote: boolean\n): ShareableRef<T> {\n  return WorkletsModule.makeShareableClone(value, shouldPersistRemote);\n}\n\nfunction cloneArray<T extends unknown[]>(\n  value: T,\n  shouldPersistRemote: boolean,\n  depth: number\n): ShareableRef<T> {\n  const clonedElements = value.map((element) =>\n    makeShareableCloneRecursive(element, shouldPersistRemote, depth + 1)\n  );\n  const clone = WorkletsModule.makeShareableClone(\n    clonedElements,\n    shouldPersistRemote,\n    value\n  ) as ShareableRef<T>;\n  shareableMappingCache.set(value, clone);\n  shareableMappingCache.set(clone);\n\n  freezeObjectInDev(value);\n  return clone;\n}\n\nfunction cloneRemoteFunction<T extends object>(\n  value: T,\n  shouldPersistRemote: boolean\n): ShareableRef<T> {\n  const clone = WorkletsModule.makeShareableClone(\n    value,\n    shouldPersistRemote,\n    value\n  );\n  shareableMappingCache.set(value, clone);\n  shareableMappingCache.set(clone);\n\n  freezeObjectInDev(value);\n  return clone;\n}\n\nfunction cloneHostObject<T extends object>(\n  value: T,\n  shouldPersistRemote: boolean\n): ShareableRef<T> {\n  // for host objects we pass the reference to the object as shareable and\n  // then recreate new host object wrapping the same instance on the UI thread.\n  // there is no point of iterating over keys as we do for regular objects.\n  const clone = WorkletsModule.makeShareableClone(\n    value,\n    shouldPersistRemote,\n    value\n  );\n  shareableMappingCache.set(value, clone);\n  shareableMappingCache.set(clone);\n\n  return clone;\n}\n\nfunction cloneWorklet<T extends WorkletFunction>(\n  value: T,\n  shouldPersistRemote: boolean,\n  depth: number\n): ShareableRef<T> {\n  if (__DEV__) {\n    const babelVersion = (value as WorkletFunctionDev).__initData.version;\n    if (babelVersion !== undefined && babelVersion !== jsVersion) {\n      throw new ReanimatedError(`[Reanimated] Mismatch between JavaScript code version and Reanimated Babel plugin version (${jsVersion} vs. ${babelVersion}).        \nSee \\`https://docs.swmansion.com/react-native-reanimated/docs/guides/troubleshooting#mismatch-between-javascript-code-version-and-reanimated-babel-plugin-version\\` for more details.\nOffending code was: \\`${getWorkletCode(value)}\\``);\n    }\n    registerWorkletStackDetails(\n      value.__workletHash,\n      (value as WorkletFunctionDev).__stackDetails!\n    );\n  }\n  if ((value as WorkletFunctionDev).__stackDetails) {\n    // `Error` type of value cannot be copied to the UI thread, so we\n    // remove it after we handled it in dev mode or delete it to ignore it in production mode.\n    // Not removing this would cause an infinite loop in production mode and it just\n    // seems more elegant to handle it this way.\n    delete (value as WorkletFunctionDev).__stackDetails;\n  }\n  // to save on transferring static __initData field of worklet structure\n  // we request shareable value to persist its UI counterpart. This means\n  // that the __initData field that contains long strings represeting the\n  // worklet code, source map, and location, will always be\n  // serialized/deserialized once.\n  const clonedProps: Record<string, unknown> = {};\n  clonedProps.__initData = makeShareableCloneRecursive(\n    value.__initData,\n    true,\n    depth + 1\n  );\n\n  for (const [key, element] of Object.entries(value)) {\n    if (key === '__initData' && clonedProps.__initData !== undefined) {\n      continue;\n    }\n    clonedProps[key] = makeShareableCloneRecursive(\n      element,\n      shouldPersistRemote,\n      depth + 1\n    );\n  }\n  const clone = WorkletsModule.makeShareableClone(\n    clonedProps,\n    // retain all worklets\n    true,\n    value\n  ) as ShareableRef<T>;\n  shareableMappingCache.set(value, clone);\n  shareableMappingCache.set(clone);\n\n  freezeObjectInDev(value);\n  return clone;\n}\n\nfunction cloneContextObject<T extends object>(value: T): ShareableRef<T> {\n  const workletContextObjectFactory = (value as Record<string, unknown>)\n    .__workletContextObjectFactory as () => T;\n  const handle = makeShareableCloneRecursive({\n    __init: () => {\n      'worklet';\n      return workletContextObjectFactory();\n    },\n  });\n  shareableMappingCache.set(value, handle);\n  return handle as ShareableRef<T>;\n}\n\nfunction clonePlainJSObject<T extends object>(\n  value: T,\n  shouldPersistRemote: boolean,\n  depth: number\n): ShareableRef<T> {\n  const clonedProps: Record<string, unknown> = {};\n  for (const [key, element] of Object.entries(value)) {\n    if (key === '__initData' && clonedProps.__initData !== undefined) {\n      continue;\n    }\n    clonedProps[key] = makeShareableCloneRecursive(\n      element,\n      shouldPersistRemote,\n      depth + 1\n    );\n  }\n  const clone = WorkletsModule.makeShareableClone(\n    clonedProps,\n    shouldPersistRemote,\n    value\n  ) as ShareableRef<T>;\n  shareableMappingCache.set(value, clone);\n  shareableMappingCache.set(clone);\n\n  freezeObjectInDev(value);\n  return clone;\n}\n\nfunction cloneRegExp<T extends RegExp>(value: T): ShareableRef<T> {\n  const pattern = value.source;\n  const flags = value.flags;\n  const handle = makeShareableCloneRecursive({\n    __init: () => {\n      'worklet';\n      return new RegExp(pattern, flags);\n    },\n  }) as unknown as ShareableRef<T>;\n  shareableMappingCache.set(value, handle);\n\n  return handle;\n}\n\nfunction cloneError<T extends Error>(value: T): ShareableRef<T> {\n  const { name, message, stack } = value;\n  const handle = makeShareableCloneRecursive({\n    __init: () => {\n      'worklet';\n      // eslint-disable-next-line reanimated/use-reanimated-error\n      const error = new Error();\n      error.name = name;\n      error.message = message;\n      error.stack = stack;\n      return error;\n    },\n  });\n  shareableMappingCache.set(value, handle);\n  return handle as unknown as ShareableRef<T>;\n}\n\nfunction cloneArrayBuffer<T extends ArrayBuffer>(\n  value: T,\n  shouldPersistRemote: boolean\n): ShareableRef<T> {\n  const clone = WorkletsModule.makeShareableClone(\n    value,\n    shouldPersistRemote,\n    value\n  );\n  shareableMappingCache.set(value, clone);\n  shareableMappingCache.set(clone);\n\n  return clone;\n}\n\nfunction cloneArrayBufferView<T extends ArrayBufferView>(\n  value: T\n): ShareableRef<T> {\n  const buffer = value.buffer;\n  const typeName = value.constructor.name;\n  const handle = makeShareableCloneRecursive({\n    __init: () => {\n      'worklet';\n      if (!VALID_ARRAY_VIEWS_NAMES.includes(typeName)) {\n        throw new ReanimatedError(\n          `[Reanimated] Invalid array view name \\`${typeName}\\`.`\n        );\n      }\n      const constructor = global[typeName as keyof typeof global];\n      if (constructor === undefined) {\n        throw new ReanimatedError(\n          `[Reanimated] Constructor for \\`${typeName}\\` not found.`\n        );\n      }\n      return new constructor(buffer);\n    },\n  }) as unknown as ShareableRef<T>;\n  shareableMappingCache.set(value, handle);\n\n  return handle;\n}\n\nfunction inaccessibleObject<T extends object>(value: T): ShareableRef<T> {\n  // This is reached for object types that are not of plain Object.prototype.\n  // We don't support such objects from being transferred as shareables to\n  // the UI runtime and hence we replace them with \"inaccessible object\"\n  // which is implemented as a Proxy object that throws on any attempt\n  // of accessing its fields. We argue that such objects can sometimes leak\n  // as attributes of objects being captured by worklets but should never\n  // be used on the UI runtime regardless. If they are being accessed, the user\n  // will get an appropriate error message.\n  const clone = makeShareableCloneRecursive<T>(INACCESSIBLE_OBJECT as T);\n  shareableMappingCache.set(value, clone);\n  return clone;\n}\n\nconst WORKLET_CODE_THRESHOLD = 255;\n\nfunction getWorkletCode(value: WorkletFunction) {\n  const code = value?.__initData?.code;\n  if (!code) {\n    return 'unknown';\n  }\n  if (code.length > WORKLET_CODE_THRESHOLD) {\n    return `${code.substring(0, WORKLET_CODE_THRESHOLD)}...`;\n  }\n  return code;\n}\n\ntype RemoteFunction<T> = {\n  __remoteFunction: FlatShareableRef<T>;\n};\n\nfunction isRemoteFunction<T>(value: {\n  __remoteFunction?: unknown;\n}): value is RemoteFunction<T> {\n  'worklet';\n  return !!value.__remoteFunction;\n}\n\n/**\n * We freeze\n *\n * - Arrays,\n * - Remote functions,\n * - Plain JS objects,\n *\n * That are transformed to a shareable with a meaningful warning. This should\n * help detect issues when someone modifies data after it's been converted.\n * Meaning that they may be doing a faulty assumption in their code expecting\n * that the updates are going to automatically propagate to the object sent to\n * the UI thread. If the user really wants some objects to be mutable they\n * should use shared values instead.\n */\nfunction freezeObjectInDev<T extends object>(value: T) {\n  if (!__DEV__) {\n    return;\n  }\n  Object.entries(value).forEach(([key, element]) => {\n    const descriptor = Object.getOwnPropertyDescriptor(value, key)!;\n    if (!descriptor.configurable) {\n      return;\n    }\n    Object.defineProperty(value, key, {\n      get() {\n        return element;\n      },\n      set() {\n        logger.warn(\n          `Tried to modify key \\`${key}\\` of an object which has been already passed to a worklet. See \nhttps://docs.swmansion.com/react-native-reanimated/docs/guides/troubleshooting#tried-to-modify-key-of-an-object-which-has-been-converted-to-a-shareable \nfor more details.`\n        );\n      },\n    });\n  });\n  Object.preventExtensions(value);\n}\n\nexport function makeShareableCloneOnUIRecursive<T>(\n  value: T\n): FlatShareableRef<T> {\n  'worklet';\n  if (SHOULD_BE_USE_WEB) {\n    // @ts-ignore web is an interesting place where we don't run a secondary VM on the UI thread\n    // see more details in the comment where USE_STUB_IMPLEMENTATION is defined.\n    return value;\n  }\n  // eslint-disable-next-line @typescript-eslint/no-shadow\n  function cloneRecursive(value: T): FlatShareableRef<T> {\n    if (\n      (typeof value === 'object' && value !== null) ||\n      typeof value === 'function'\n    ) {\n      if (isHostObject(value)) {\n        // We call `_makeShareableClone` to wrap the provided HostObject\n        // inside ShareableJSRef.\n        return global._makeShareableClone(\n          value,\n          undefined\n        ) as FlatShareableRef<T>;\n      }\n      if (isRemoteFunction<T>(value)) {\n        // RemoteFunctions are created by us therefore they are\n        // a Shareable out of the box and there is no need to\n        // call `_makeShareableClone`.\n        return value.__remoteFunction;\n      }\n      if (Array.isArray(value)) {\n        return global._makeShareableClone(\n          value.map(cloneRecursive),\n          undefined\n        ) as FlatShareableRef<T>;\n      }\n      const toAdapt: Record<string, FlatShareableRef<T>> = {};\n      for (const [key, element] of Object.entries(value)) {\n        toAdapt[key] = cloneRecursive(element);\n      }\n      return global._makeShareableClone(toAdapt, value) as FlatShareableRef<T>;\n    }\n    return global._makeShareableClone(value, undefined);\n  }\n  return cloneRecursive(value);\n}\n\nfunction makeShareableJS<T extends object>(value: T): T {\n  return value;\n}\n\nfunction makeShareableNative<T extends object>(value: T): T {\n  if (shareableMappingCache.get(value)) {\n    return value;\n  }\n  const handle = makeShareableCloneRecursive({\n    __init: () => {\n      'worklet';\n      return value;\n    },\n  });\n  shareableMappingCache.set(value, handle);\n  return value;\n}\n\n/**\n * This function creates a value on UI with persistent state - changes to it on\n * the UI thread will be seen by all worklets. Use it when you want to create a\n * value that is read and written only on the UI thread.\n */\nexport const makeShareable = SHOULD_BE_USE_WEB\n  ? makeShareableJS\n  : makeShareableNative;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}