{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport * as CryptoJS from \"crypto-js\";\nimport { executeQuery } from \"../../aws/db/dbOperation\";\nimport { User } from \"../../models/User\";\nimport { ActivityLogger } from \"../../log/ActivityLogger\";\nvar keyString = \"1234567800000000\";\nvar ivString = \"0000000012345678\";\nvar scannedQ4Parts = [];\nvar totalScansNeeded = 0;\nvar currentScans = 0;\nvar key = CryptoJS.enc.Utf8.parse(keyString);\nvar iv = CryptoJS.enc.Utf8.parse(ivString);\nvar uniqueQ4Parts = new Set();\nexport function resetDecryptionState() {\n  scannedQ4Parts = [];\n  totalScansNeeded = 0;\n  currentScans = 0;\n  uniqueQ4Parts.clear();\n}\nexport function decryptDecodedText(decodedText) {\n  try {\n    var QRjson;\n    try {\n      QRjson = JSON.parse(decodedText);\n    } catch (jsonError) {\n      return {\n        error: \"Invalid JSON format.\"\n      };\n    }\n    if (!QRjson.Q2 || !QRjson.Q1 || !QRjson.Q3 || !QRjson.Q4) {\n      return {\n        error: \"Invalid format: Missing required keys.\"\n      };\n    } else {\n      var encryptedStr = QRjson;\n      var decryptedData = {};\n      decryptedData.Q1 = encryptedStr.Q1;\n      decryptedData.Q2 = encryptedStr.Q2;\n      var hexQ3 = CryptoJS.enc.Hex.parse(QRjson.Q3);\n      var base64Q3 = CryptoJS.enc.Base64.stringify(hexQ3);\n      var decryptedDataQ3Str = CryptoJS.AES.decrypt(base64Q3, key, {\n        iv: iv,\n        mode: CryptoJS.mode.CBC,\n        padding: CryptoJS.pad.Pkcs7\n      }).toString(CryptoJS.enc.Utf8);\n      if (!decryptedDataQ3Str) {\n        return {\n          error: \"Decryption failed, result is empty.\"\n        };\n      } else {\n        var decryptedDataQ3 = JSON.parse(decryptedDataQ3Str);\n        if (\"h2\" in decryptedDataQ3) {\n          if (decryptedDataQ3[\"h2\"] !== \"Sqr001\") {\n            return {\n              error: 'Decrypted h2 value is not equal to \"Sqr001\".'\n            };\n          } else {\n            decryptedData.Q3 = decryptedDataQ3Str;\n          }\n        } else {\n          return {\n            error: 'Decrypted data does not contain property \"h2\".'\n          };\n        }\n      }\n      var decryptedDataQ4;\n      if (encryptedStr.Q2 > 1) {\n        if (totalScansNeeded === 0) {\n          totalScansNeeded = parseInt(encryptedStr.Q2, 10);\n        }\n        if (!uniqueQ4Parts.has(encryptedStr.Q4)) {\n          scannedQ4Parts.push(encryptedStr.Q4);\n          uniqueQ4Parts.add(encryptedStr.Q4);\n        } else {\n          return {\n            warning: \"Qr code is already Scanned.\",\n            Q2: encryptedStr.Q2\n          };\n        }\n        currentScans++;\n        if (currentScans < totalScansNeeded) {\n          return {\n            message: `Scan ${currentScans} completed. Please scan ${totalScansNeeded - currentScans} more times.`,\n            Q2: encryptedStr.Q2\n          };\n        } else {\n          var concatenatedQ4 = scannedQ4Parts.join(\"\");\n          decryptedDataQ4 = CryptoJS.AES.decrypt(concatenatedQ4, key, {\n            iv: iv,\n            mode: CryptoJS.mode.CBC,\n            padding: CryptoJS.pad.Pkcs7\n          }).toString(CryptoJS.enc.Utf8);\n          decryptedData.Q4 = decryptedDataQ4;\n          resetDecryptionState();\n        }\n      } else {\n        decryptedDataQ4 = CryptoJS.AES.decrypt(encryptedStr.Q4, key, {\n          iv: iv,\n          mode: CryptoJS.mode.CBC,\n          padding: CryptoJS.pad.Pkcs7\n        }).toString(CryptoJS.enc.Utf8);\n        decryptedData.Q4 = decryptedDataQ4;\n      }\n      if (!decryptedDataQ4) {\n        return {\n          error: \"Decryption failed, result is empty.\"\n        };\n      }\n      return {\n        data: decryptedData\n      };\n    }\n  } catch (error) {\n    console.error(\"Error during decryption:\", error);\n    if (error instanceof Error) {\n      return {\n        error: error.message\n      };\n    } else {\n      return {\n        error: \"An unknown error occurred during decryption.\"\n      };\n    }\n  }\n}\nexport var getRelationshipInfo = function () {\n  var _ref = _asyncToGenerator(function* (relationshipTypeCode) {\n    var method = \"POST\";\n    var queryString;\n    queryString = \"SELECT name, is_manual_entry FROM relationship_type WHERE relationship_type_code = '\" + relationshipTypeCode + \"';\";\n    ActivityLogger.insertInfoLogEntry(new User(), 'SelfqrScanner', 'getRelationshipInfo', 'execute query', '', null, queryString);\n    return executeQuery(method, queryString);\n  });\n  return function getRelationshipInfo(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();","map":{"version":3,"names":["CryptoJS","executeQuery","User","ActivityLogger","keyString","ivString","scannedQ4Parts","totalScansNeeded","currentScans","key","enc","Utf8","parse","iv","uniqueQ4Parts","Set","resetDecryptionState","clear","decryptDecodedText","decodedText","QRjson","JSON","jsonError","error","Q2","Q1","Q3","Q4","encryptedStr","decryptedData","hexQ3","Hex","base64Q3","Base64","stringify","decryptedDataQ3Str","AES","decrypt","mode","CBC","padding","pad","Pkcs7","toString","decryptedDataQ3","decryptedDataQ4","parseInt","has","push","add","warning","message","concatenatedQ4","join","data","console","Error","getRelationshipInfo","_ref","_asyncToGenerator","relationshipTypeCode","method","queryString","insertInfoLogEntry","_x","apply","arguments"],"sources":["/home/runner/work/DemoReception/DemoReception/example/src/screens/selfqr-scanner/SelfqrScannerService.ts"],"sourcesContent":["import * as CryptoJS from \"crypto-js\";\nimport { executeQuery } from \"../../aws/db/dbOperation\";\nimport { User } from \"../../models/User\";\nimport { ActivityLogger } from \"../../log/ActivityLogger\";\n\nconst keyString = \"1234567800000000\";\nconst ivString = \"0000000012345678\";\n\nlet scannedQ4Parts: string[] = [];\nlet totalScansNeeded = 0;\nlet currentScans = 0;\n\n// CONVERT key and IV strings to WordArray\nconst key = CryptoJS.enc.Utf8.parse(keyString);\nconst iv = CryptoJS.enc.Utf8.parse(ivString);\nconst uniqueQ4Parts = new Set<string>();\n\n// RESET\nexport function resetDecryptionState() {\n  scannedQ4Parts = [];\n  totalScansNeeded = 0;\n  currentScans = 0;\n  uniqueQ4Parts.clear();\n}\n\nexport function decryptDecodedText(decodedText: string) {\n  try {\n    let QRjson;\n\n    // VALIDATE the JSON format\n    try {\n      QRjson = JSON.parse(decodedText);\n    } catch (jsonError) {\n      return { error: \"Invalid JSON format.\" };\n    }\n\n    // VALIDATE the expected format\n    if (!QRjson.Q2 || !QRjson.Q1 || !QRjson.Q3 || !QRjson.Q4) {\n      return { error: \"Invalid format: Missing required keys.\" };\n    } else {\n      const encryptedStr = QRjson;\n      const decryptedData: { [key: string]: string } = {};\n\n      decryptedData.Q1 = encryptedStr.Q1;\n      decryptedData.Q2 = encryptedStr.Q2;\n\n      // DECRYPT Q3\n      const hexQ3 = CryptoJS.enc.Hex.parse(QRjson.Q3);\n      const base64Q3 = CryptoJS.enc.Base64.stringify(hexQ3);\n\n      const decryptedDataQ3Str = CryptoJS.AES.decrypt(base64Q3, key, {\n        iv: iv,\n        mode: CryptoJS.mode.CBC,\n        padding: CryptoJS.pad.Pkcs7,\n      }).toString(CryptoJS.enc.Utf8);\n\n      if (!decryptedDataQ3Str) {\n        return { error: \"Decryption failed, result is empty.\" };\n      } else {\n        const decryptedDataQ3 = JSON.parse(decryptedDataQ3Str);\n        if (\"h2\" in decryptedDataQ3) {\n          if (decryptedDataQ3[\"h2\"] !== \"Sqr001\") {\n            return { error: 'Decrypted h2 value is not equal to \"Sqr001\".' };\n          } else {\n            decryptedData.Q3 = decryptedDataQ3Str;\n          }\n        } else {\n          return { error: 'Decrypted data does not contain property \"h2\".' };\n        }\n      }\n\n      // DECRYPT Q4\n      let decryptedDataQ4: any;\n      if (encryptedStr.Q2 > 1) {\n        if (totalScansNeeded === 0) {\n          totalScansNeeded = parseInt(encryptedStr.Q2, 10);\n        }\n        if (!uniqueQ4Parts.has(encryptedStr.Q4)) {\n          scannedQ4Parts.push(encryptedStr.Q4);\n          uniqueQ4Parts.add(encryptedStr.Q4);\n        } else {\n          return {\n            warning: \"Qr code is already Scanned.\",\n            Q2: encryptedStr.Q2,\n          };\n        }\n        currentScans++;\n\n        if (currentScans < totalScansNeeded) {\n          return {\n            message: `Scan ${currentScans} completed. Please scan ${\n              totalScansNeeded - currentScans\n            } more times.`,\n            Q2: encryptedStr.Q2,\n          };\n        } else {\n          // CONCATENATE all scanned Q4 parts\n          const concatenatedQ4 = scannedQ4Parts.join(\"\");\n          decryptedDataQ4 = CryptoJS.AES.decrypt(concatenatedQ4, key, {\n            iv: iv,\n            mode: CryptoJS.mode.CBC,\n            padding: CryptoJS.pad.Pkcs7,\n          }).toString(CryptoJS.enc.Utf8);\n\n          decryptedData.Q4 = decryptedDataQ4;\n          resetDecryptionState();\n        }\n      } else {\n        decryptedDataQ4 = CryptoJS.AES.decrypt(encryptedStr.Q4, key, {\n          iv: iv,\n          mode: CryptoJS.mode.CBC,\n          padding: CryptoJS.pad.Pkcs7,\n        }).toString(CryptoJS.enc.Utf8);\n\n        decryptedData.Q4 = decryptedDataQ4;\n      }\n\n      if (!decryptedDataQ4) {\n        return { error: \"Decryption failed, result is empty.\" };\n      }\n      return { data: decryptedData };\n    }\n  } catch (error: unknown) {\n    console.error(\"Error during decryption:\", error);\n    if (error instanceof Error) {\n      return { error: error.message };\n    } else {\n      return { error: \"An unknown error occurred during decryption.\" };\n    }\n  }\n}\n\n// GET Relationship\nexport const getRelationshipInfo = async (relationshipTypeCode: string) => {\n  const method = \"POST\";\n  let queryString: string;\n\n  queryString =\n    \"SELECT name, is_manual_entry FROM relationship_type WHERE relationship_type_code = '\" +\n    relationshipTypeCode +\n    \"';\";\n  ActivityLogger.insertInfoLogEntry(new User(), 'SelfqrScanner', 'getRelationshipInfo', 'execute query', '', null, queryString);\n  return executeQuery(method, queryString);\n};\n"],"mappings":";AAAA,OAAO,KAAKA,QAAQ,MAAM,WAAW;AACrC,SAASC,YAAY;AACrB,SAASC,IAAI;AACb,SAASC,cAAc;AAEvB,IAAMC,SAAS,GAAG,kBAAkB;AACpC,IAAMC,QAAQ,GAAG,kBAAkB;AAEnC,IAAIC,cAAwB,GAAG,EAAE;AACjC,IAAIC,gBAAgB,GAAG,CAAC;AACxB,IAAIC,YAAY,GAAG,CAAC;AAGpB,IAAMC,GAAG,GAAGT,QAAQ,CAACU,GAAG,CAACC,IAAI,CAACC,KAAK,CAACR,SAAS,CAAC;AAC9C,IAAMS,EAAE,GAAGb,QAAQ,CAACU,GAAG,CAACC,IAAI,CAACC,KAAK,CAACP,QAAQ,CAAC;AAC5C,IAAMS,aAAa,GAAG,IAAIC,GAAG,CAAS,CAAC;AAGvC,OAAO,SAASC,oBAAoBA,CAAA,EAAG;EACrCV,cAAc,GAAG,EAAE;EACnBC,gBAAgB,GAAG,CAAC;EACpBC,YAAY,GAAG,CAAC;EAChBM,aAAa,CAACG,KAAK,CAAC,CAAC;AACvB;AAEA,OAAO,SAASC,kBAAkBA,CAACC,WAAmB,EAAE;EACtD,IAAI;IACF,IAAIC,MAAM;IAGV,IAAI;MACFA,MAAM,GAAGC,IAAI,CAACT,KAAK,CAACO,WAAW,CAAC;IAClC,CAAC,CAAC,OAAOG,SAAS,EAAE;MAClB,OAAO;QAAEC,KAAK,EAAE;MAAuB,CAAC;IAC1C;IAGA,IAAI,CAACH,MAAM,CAACI,EAAE,IAAI,CAACJ,MAAM,CAACK,EAAE,IAAI,CAACL,MAAM,CAACM,EAAE,IAAI,CAACN,MAAM,CAACO,EAAE,EAAE;MACxD,OAAO;QAAEJ,KAAK,EAAE;MAAyC,CAAC;IAC5D,CAAC,MAAM;MACL,IAAMK,YAAY,GAAGR,MAAM;MAC3B,IAAMS,aAAwC,GAAG,CAAC,CAAC;MAEnDA,aAAa,CAACJ,EAAE,GAAGG,YAAY,CAACH,EAAE;MAClCI,aAAa,CAACL,EAAE,GAAGI,YAAY,CAACJ,EAAE;MAGlC,IAAMM,KAAK,GAAG9B,QAAQ,CAACU,GAAG,CAACqB,GAAG,CAACnB,KAAK,CAACQ,MAAM,CAACM,EAAE,CAAC;MAC/C,IAAMM,QAAQ,GAAGhC,QAAQ,CAACU,GAAG,CAACuB,MAAM,CAACC,SAAS,CAACJ,KAAK,CAAC;MAErD,IAAMK,kBAAkB,GAAGnC,QAAQ,CAACoC,GAAG,CAACC,OAAO,CAACL,QAAQ,EAAEvB,GAAG,EAAE;QAC7DI,EAAE,EAAEA,EAAE;QACNyB,IAAI,EAAEtC,QAAQ,CAACsC,IAAI,CAACC,GAAG;QACvBC,OAAO,EAAExC,QAAQ,CAACyC,GAAG,CAACC;MACxB,CAAC,CAAC,CAACC,QAAQ,CAAC3C,QAAQ,CAACU,GAAG,CAACC,IAAI,CAAC;MAE9B,IAAI,CAACwB,kBAAkB,EAAE;QACvB,OAAO;UAAEZ,KAAK,EAAE;QAAsC,CAAC;MACzD,CAAC,MAAM;QACL,IAAMqB,eAAe,GAAGvB,IAAI,CAACT,KAAK,CAACuB,kBAAkB,CAAC;QACtD,IAAI,IAAI,IAAIS,eAAe,EAAE;UAC3B,IAAIA,eAAe,CAAC,IAAI,CAAC,KAAK,QAAQ,EAAE;YACtC,OAAO;cAAErB,KAAK,EAAE;YAA+C,CAAC;UAClE,CAAC,MAAM;YACLM,aAAa,CAACH,EAAE,GAAGS,kBAAkB;UACvC;QACF,CAAC,MAAM;UACL,OAAO;YAAEZ,KAAK,EAAE;UAAiD,CAAC;QACpE;MACF;MAGA,IAAIsB,eAAoB;MACxB,IAAIjB,YAAY,CAACJ,EAAE,GAAG,CAAC,EAAE;QACvB,IAAIjB,gBAAgB,KAAK,CAAC,EAAE;UAC1BA,gBAAgB,GAAGuC,QAAQ,CAAClB,YAAY,CAACJ,EAAE,EAAE,EAAE,CAAC;QAClD;QACA,IAAI,CAACV,aAAa,CAACiC,GAAG,CAACnB,YAAY,CAACD,EAAE,CAAC,EAAE;UACvCrB,cAAc,CAAC0C,IAAI,CAACpB,YAAY,CAACD,EAAE,CAAC;UACpCb,aAAa,CAACmC,GAAG,CAACrB,YAAY,CAACD,EAAE,CAAC;QACpC,CAAC,MAAM;UACL,OAAO;YACLuB,OAAO,EAAE,6BAA6B;YACtC1B,EAAE,EAAEI,YAAY,CAACJ;UACnB,CAAC;QACH;QACAhB,YAAY,EAAE;QAEd,IAAIA,YAAY,GAAGD,gBAAgB,EAAE;UACnC,OAAO;YACL4C,OAAO,EAAG,QAAO3C,YAAa,2BAC5BD,gBAAgB,GAAGC,YACpB,cAAa;YACdgB,EAAE,EAAEI,YAAY,CAACJ;UACnB,CAAC;QACH,CAAC,MAAM;UAEL,IAAM4B,cAAc,GAAG9C,cAAc,CAAC+C,IAAI,CAAC,EAAE,CAAC;UAC9CR,eAAe,GAAG7C,QAAQ,CAACoC,GAAG,CAACC,OAAO,CAACe,cAAc,EAAE3C,GAAG,EAAE;YAC1DI,EAAE,EAAEA,EAAE;YACNyB,IAAI,EAAEtC,QAAQ,CAACsC,IAAI,CAACC,GAAG;YACvBC,OAAO,EAAExC,QAAQ,CAACyC,GAAG,CAACC;UACxB,CAAC,CAAC,CAACC,QAAQ,CAAC3C,QAAQ,CAACU,GAAG,CAACC,IAAI,CAAC;UAE9BkB,aAAa,CAACF,EAAE,GAAGkB,eAAe;UAClC7B,oBAAoB,CAAC,CAAC;QACxB;MACF,CAAC,MAAM;QACL6B,eAAe,GAAG7C,QAAQ,CAACoC,GAAG,CAACC,OAAO,CAACT,YAAY,CAACD,EAAE,EAAElB,GAAG,EAAE;UAC3DI,EAAE,EAAEA,EAAE;UACNyB,IAAI,EAAEtC,QAAQ,CAACsC,IAAI,CAACC,GAAG;UACvBC,OAAO,EAAExC,QAAQ,CAACyC,GAAG,CAACC;QACxB,CAAC,CAAC,CAACC,QAAQ,CAAC3C,QAAQ,CAACU,GAAG,CAACC,IAAI,CAAC;QAE9BkB,aAAa,CAACF,EAAE,GAAGkB,eAAe;MACpC;MAEA,IAAI,CAACA,eAAe,EAAE;QACpB,OAAO;UAAEtB,KAAK,EAAE;QAAsC,CAAC;MACzD;MACA,OAAO;QAAE+B,IAAI,EAAEzB;MAAc,CAAC;IAChC;EACF,CAAC,CAAC,OAAON,KAAc,EAAE;IACvBgC,OAAO,CAAChC,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;IAChD,IAAIA,KAAK,YAAYiC,KAAK,EAAE;MAC1B,OAAO;QAAEjC,KAAK,EAAEA,KAAK,CAAC4B;MAAQ,CAAC;IACjC,CAAC,MAAM;MACL,OAAO;QAAE5B,KAAK,EAAE;MAA+C,CAAC;IAClE;EACF;AACF;AAGA,OAAO,IAAMkC,mBAAmB;EAAA,IAAAC,IAAA,GAAAC,iBAAA,CAAG,WAAOC,oBAA4B,EAAK;IACzE,IAAMC,MAAM,GAAG,MAAM;IACrB,IAAIC,WAAmB;IAEvBA,WAAW,GACT,sFAAsF,GACtFF,oBAAoB,GACpB,IAAI;IACNzD,cAAc,CAAC4D,kBAAkB,CAAC,IAAI7D,IAAI,CAAC,CAAC,EAAE,eAAe,EAAE,qBAAqB,EAAE,eAAe,EAAE,EAAE,EAAE,IAAI,EAAE4D,WAAW,CAAC;IAC7H,OAAO7D,YAAY,CAAC4D,MAAM,EAAEC,WAAW,CAAC;EAC1C,CAAC;EAAA,gBAVYL,mBAAmBA,CAAAO,EAAA;IAAA,OAAAN,IAAA,CAAAO,KAAA,OAAAC,SAAA;EAAA;AAAA,GAU/B"},"metadata":{},"sourceType":"module","externalDependencies":[]}